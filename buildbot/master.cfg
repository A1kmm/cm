import os.path
from buildbot.scheduler import Nightly
from buildbot.process import factory
from buildbot.steps import source, shell
from buildbot.status import html
from buildbot.status.mail import MailNotifier
from buildbot.buildslave import BuildSlave

c = BuildmasterConfig = {}

c['slaves'] = [BuildSlave("x86_64-linux-intel", "******"),
              BuildSlave("x86_64-linux-gnu", "******")]

c['schedulers'] = [Nightly(name="every_day",
                           builderNames=['x86_64-linux-intel-opencmissextras','x86_64-linux-intel-OpenCMISS','x86_64-linux-gnu-opencmissextras','x86_64-linux-gnu-OpenCMISS',],
                           hour=14, minute=25),
                  Nightly(name="every_week",
                          builderNames=['x86_64-linux-intel-clean','x86_64-linux-gnu-clean'],
                          dayOfWeek=0,hour=14,minute=20)]
                           

f_extras_x86_64_linux_intel=factory.BuildFactory()
f_extras_x86_64_linux_intel.addStep(source.SVN(mode='update',baseURL='https://svn.physiomeproject.org/svn/opencmissextras/cm/',defaultBranch='trunk/external/x86_64-linux-debug-intel',workdir='cm/external/x86_64-linux-debug-intel'))

f_extras_x86_64_linux_gnu=factory.BuildFactory()
f_extras_x86_64_linux_gnu.addStep(source.SVN(mode='update',baseURL='https://svn.physiomeproject.org/svn/opencmissextras/cm/',defaultBranch='trunk/external/x86_64-linux-debug-gnu',workdir='cm/external/x86_64-linux-debug-gnu'))

f_x86_64_linux_intel = factory.BuildFactory()
f_x86_64_linux_intel.addStep(source.SVN(mode='update',baseURL='https://opencmiss.svn.sourceforge.net/svnroot/opencmiss/cm/',defaultBranch='trunk',workdir="cm"))

make_analytic_laplace = shell.ShellCommand(name="AnalyticLaplace Build",command=["make"],workdir="cm/examples/AnalyticLaplace")
f_x86_64_linux_intel.addStep(make_analytic_laplace)

#test_analytic_laplace = shell.ShellCommand(name="AnalyticLaplace Test",command=["make", "test"],workdir="cm/examples/AnalyticLaplace")
#f_x86_64_linux_intel.addStep(test_analytic_laplace)

make_diffusion = shell.ShellCommand(name="Diffusion Build",command=["make"],workdir="cm/examples/Diffusion")
f_x86_64_linux_intel.addStep(make_diffusion)

make_finite_elasticity = shell.ShellCommand(name="FiniteElasticity Build",command=["make"],workdir="cm/examples/FiniteElasticity")
f_x86_64_linux_intel.addStep(make_finite_elasticity)

make_helmholtz = shell.ShellCommand(name="Helmholtz Build",command=["make"],workdir="cm/examples/Helmholtz")
f_x86_64_linux_intel.addStep(make_helmholtz)

make_laplace = shell.ShellCommand(name="Laplace Build",command=["make"],workdir="cm/examples/Laplace")
f_x86_64_linux_intel.addStep(make_laplace)

make_monodomain = shell.ShellCommand(name="Monodomain Build",command=["make"],workdir="cm/examples/Monodomain")
f_x86_64_linux_intel.addStep(make_monodomain)

make_nonlinear_poisson = shell.ShellCommand(name="NonlinearPoisson Build",command=["make"],workdir="cm/examples/NonlinearPoisson")
f_x86_64_linux_intel.addStep(make_nonlinear_poisson)

make_cellml = shell.ShellCommand(name="cellml Build",command=["make"],workdir="cm/examples/cellml")
f_x86_64_linux_intel.addStep(make_cellml)

make_define_geometry_and_export = shell.ShellCommand(name="define-geometry-and-export Build",command=["make"],workdir="cm/examples/define-geometry-and-export")
f_x86_64_linux_intel.addStep(make_define_geometry_and_export)

#Hide for now
#make_simple_field_manipulation_direct_access = shell.ShellCommand(name="simple-field-manipulation-direct-access make Build",command=["make"],workdir="cm/examples/simple-field-manipulation-direct-access")
#f_x86_64_linux_intel.addStep(make_simple_field_manipulation_direct_access)

f_x86_64_linux_gnu = factory.BuildFactory()
f_x86_64_linux_gnu.addStep(source.SVN(mode='update',baseURL='https://opencmiss.svn.sourceforge.net/svnroot/opencmiss/cm/',defaultBranch='trunk',workdir="cm"))

make_analytic_laplace = shell.ShellCommand(name="AnalyticLaplace Build",command=["make","COMPILER=gnu"],workdir="cm/examples/AnalyticLaplace")
f_x86_64_linux_gnu.addStep(make_analytic_laplace)

#test_analytic_laplace = shell.ShellCommand(name="AnalyticLaplace Test",command=["make", "test"],workdir="cm/examples/AnalyticLaplace")
#f_x86_64_linux_gnu.addStep(test_analytic_laplace)

make_diffusion = shell.ShellCommand(name="Diffusion Build",command=["make","COMPILER=gnu"],workdir="cm/examples/Diffusion")
f_x86_64_linux_gnu.addStep(make_diffusion)

make_finite_elasticity = shell.ShellCommand(name="FiniteElasticity Build",command=["make","COMPILER=gnu"],workdir="cm/examples/FiniteElasticity")
f_x86_64_linux_gnu.addStep(make_finite_elasticity)

make_helmholtz = shell.ShellCommand(name="Helmholtz Build",command=["make","COMPILER=gnu"],workdir="cm/examples/Helmholtz")
f_x86_64_linux_gnu.addStep(make_helmholtz)

make_laplace = shell.ShellCommand(name="Laplace Build",command=["make","COMPILER=gnu"],workdir="cm/examples/Laplace")
f_x86_64_linux_gnu.addStep(make_laplace)

make_monodomain = shell.ShellCommand(name="Monodomain Build",command=["make","COMPILER=gnu"],workdir="cm/examples/Monodomain")
f_x86_64_linux_gnu.addStep(make_monodomain)

make_nonlinear_poisson = shell.ShellCommand(name="NonlinearPoisson Build",command=["make","COMPILER=gnu"],workdir="cm/examples/NonlinearPoisson")
f_x86_64_linux_gnu.addStep(make_nonlinear_poisson)

make_cellml = shell.ShellCommand(name="cellml Build",command=["make","COMPILER=gnu"],workdir="cm/examples/cellml")
f_x86_64_linux_gnu.addStep(make_cellml)

make_define_geometry_and_export = shell.ShellCommand(name="define-geometry-and-export Build",command=["make","COMPILER=gnu"],workdir="cm/examples/define-geometry-and-export")
f_x86_64_linux_gnu.addStep(make_define_geometry_and_export)

#Hide for now
#make_simple_field_manipulation_direct_access = shell.ShellCommand(name="simple-field-manipulation-direct-access make Build",command=["make","COMPILER=gnu"],workdir="cm/examples/simple-field-manipulation-direct-access")
#f_x86_64_linux_gnu.addStep(make_simple_field_manipulation_direct_access)

f_x86_64_linux_clean=factory.BuildFactory()
f_x86_64_linux_clean.addStep(shell.ShellCommand(name="clean",command=["rm","cm","-rf"],workdir="OpenCMISS"))

c['builders'] = [
    {'name':'x86_64-linux-intel-opencmissextras',
    'slavename':'x86_64-linux-intel',
    'builddir':'OpenCMISS_intel/opencmissextras',
    'factory':f_extras_x86_64_linux_intel
    },
    {'name':'x86_64-linux-intel-OpenCMISS',
    'slavename':'x86_64-linux-intel',
    'builddir':'OpenCMISS_intel/OpenCMISS',
    'factory':f_x86_64_linux_intel
    },
    {'name':'x86_64-linux-gnu-opencmissextras',
    'slavename':'x86_64-linux-gnu',
    'builddir':'OpenCMISS_gnu/opencmissextras',
    'factory':f_extras_x86_64_linux_gnu
    },
    {'name':'x86_64-linux-gnu-OpenCMISS',
    'slavename':'x86_64-linux-gnu',
    'builddir':'OpenCMISS_gnu/OpenCMISS',
    'factory':f_x86_64_linux_gnu
    },
    {'name':'x86_64-linux-intel-clean',
    'slavename':'x86_64-linux-intel',
    'builddir':'OpenCMISS_intel',
    'factory':f_x86_64_linux_clean
    },
    {'name':'x86_64-linux-gnu-clean',
    'slavename':'x86_64-linux-gnu',
    'builddir':'OpenCMISS_gnu',
    'factory':f_x86_64_linux_clean
    }
]

c['slavePortnum'] = 9999

mn = MailNotifier(fromaddr="noreply@bioeng.auckland.ac.nz",relayhost="mailhost.auckland.ac.nz",sendToInterestedUsers=False,extraRecipients=['opencmiss-automated1@lists.sourceforge.net'], mode="failing")

c['status'] = []
c['status'].append(html.WebStatus(http_port=8888,allowForce=True))
c['status'].append(mn)

c['projectName'] = "OpenCMISS"
c['projectURL'] = "http://sourceforge.net/projects/opencmiss/"

c['buildbotURL'] = "http://autotest.bioeng.auckland.ac.nz:8888/"

