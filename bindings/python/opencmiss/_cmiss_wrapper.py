import opencmiss_swig
from _docstrings import docstrings

class CMISSError(Exception):
    def __init__(self, value):
        self.value = value
    def __str__(self):
        return repr(self.value)


class CMWrapper(object):
    """Wrap the OpenCMISS python interface generated by SWIG to make
    it more object oriented and "Pythonic"
    """

    def __init__(self):
        self.WorldCoordinateSystem = self.CoordinateSystemTypeInitialise()
        self.WorldRegion = self.RegionTypeInitialise()
        self.Initialise(self.WorldCoordinateSystem, self.WorldRegion)

    def __getattr__(self,attr_name):
        """Get an OpenCMISS constant or routine, removing the need to
        prefix it with a CMISS namespace as this is done already in Python.

        If the attribute is a function, then return a wrapped function
        that checks the return status for errors.
        """
        #Constants in Python should be in capitals with underscores, but
        #if we converted to camel-case this would screw up things like
        #CMISSSolverPETScLibrary, so just use camel-case
        try:
            attr = getattr(opencmiss_swig,'CMISS'+attr_name)
            if hasattr(attr,'__call__'):
                return_func = lambda *args: self._wrap_routine(attr, args)
                try:
                    return_func.__doc__ = docstrings['CMISS'+attr_name]
                except KeyError:
                    return_func.__doc__ = ''
                return return_func
            else:
                return attr
        except AttributeError:
            raise AttributeError("OpenCMISS has no attribute %r" % (attr))

    def _wrap_routine(self, routine, args=None):
        """Call a routine and check the return value, raise an
        exception if it is non-zero and return any other return
        values"""
        if args is None:
            r = routine()
        else:
            r = routine(*args)
        if isinstance(r,tuple):
            status = r[0]
            if len(r) == 1:
                return_val = None
            elif len(r) == 2:
                return_val = r[1]
            else:
                return_val = r[1:]
        else:
            status = r
            return_val = None
        if status != 0:
            #TODO: get error strings from OpenCMISS
            raise CMISSError, 'Non-zero return value'
        return return_val

