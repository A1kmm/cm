<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><title>OpenCMISS Programmer Documentation</title><meta content="DocBook XSL Stylesheets V1.68.1" name="generator" /></head><body><div class="book" lang="en"><div class="titlepage"><div><div><h1 class="title"><a id="N10001" />OpenCMISS Programmer Documentation</h1></div></div><hr /></div><div class="toc"><p><b>Table of Contents</b></p><dl><dt><span class="chapter"><a href="#N10005">1. Introduction</a></span></dt><dd><dl><dt><span class="sect1"><a href="#N1000A">CMISS</a></span></dt><dt><span class="sect1"><a href="#N10011">Shared Memeory Computing vs Distributed Memeory Computing</a></span></dt><dt><span class="sect1"><a href="#N10018">Objectives of OpenCMISS</a></span></dt></dl></dd><dt><span class="chapter"><a href="#N1001D">2. OpenCMISS Concepts</a></span></dt><dd><dl><dt><span class="section"><a href="#basis">Basis Functions</a></span></dt><dt><span class="section"><a href="#coordinate system">Coordinate Systems</a></span></dt><dt><span class="section"><a href="#regions">Regions</a></span></dt><dd><dl><dt><span class="section"><a href="#nodes">Nodes</a></span></dt><dt><span class="section"><a href="#mesh">Meshes</a></span></dt><dt><span class="section"><a href="#field">Fields</a></span></dt><dt><span class="section"><a href="#equation_set">Equations Sets</a></span></dt></dl></dd><dt><span class="section"><a href="#problem">Problems</a></span></dt><dd><dl><dt><span class="section"><a href="#N102B3">Solutions</a></span></dt><dt><span class="section"><a href="#control">Control</a></span></dt></dl></dd></dl></dd><dt><span class="chapter"><a href="#N102F8">3. Obtaining the Code and Setting up the development environment</a></span></dt><dd><dl><dt><span class="sect1"><a href="#N102FB">Obtaining the Code</a></span></dt><dt><span class="sect1"><a href="#N10321">Project Set up</a></span></dt><dd><dl><dt><span class="sect2"><a href="#N10324">On AIX 5.3</a></span></dt><dt><span class="sect2"><a href="#N1032F">On Ubuntu 8.04</a></span></dt><dt><span class="sect2"><a href="#N10365">On Windows XP (Visual Studio 2005)</a></span></dt><dt><span class="sect2"><a href="#N10397">On Windows Vista (Visual Studio 2008)</a></span></dt></dl></dd></dl></dd><dt><span class="chapter"><a href="#N10404">4. Object Interface</a></span></dt><dt><span class="chapter"><a href="#N10407">5. A simple program - Laplace</a></span></dt><dt><span class="chapter"><a href="#N1040A">6. Library Commands</a></span></dt><dd><dl><dt><span class="sect1"><a href="#N1040D">Top level</a></span></dt><dt><span class="sect1"><a href="#N10410">Basis functions</a></span></dt><dt><span class="sect1"><a href="#N10413">Coordinate Systems</a></span></dt><dt><span class="sect1"><a href="#N10416">Regions</a></span></dt><dt><span class="sect1"><a href="#N10419">Problems</a></span></dt></dl></dd><dt><span class="chapter"><a href="#N1041C">7. Coding Style</a></span></dt></dl></div><div class="chapter" lang="en"><div class="titlepage"><div><div><h2 class="title"><a id="N10005" />Chapter 1. Introduction</h2></div></div></div><div class="toc"><p><b>Table of Contents</b></p><dl><dt><span class="sect1"><a href="#N1000A">CMISS</a></span></dt><dt><span class="sect1"><a href="#N10011">Shared Memeory Computing vs Distributed Memeory Computing</a></span></dt><dt><span class="sect1"><a href="#N10018">Objectives of OpenCMISS</a></span></dt></dl></div><p>
    OpenCMISS is a project for the re-engineering of the CMISS computational engine.
  </p><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="N1000A" />CMISS</h2></div></div></div><p>
      CMISS is an interactive computer program for Continuum Mechanics, Image analysis, Signal processing 
      and SystemIdentification.
      It provides a mathematical modelling environment that allows the application of finite element analysis, 
      boundary element and collocation techniques to a variety of complex bioengineering problems. 
    </p><p>
     CMISS consists of two main components, cmgui and cm. 
     cmgui is a graphical front end with advanced 3D display and modelling capabilities. 
     It is the open source project written in C/C++.   
     cm is a computational backend that may be run remotely on powerful workstations or supercomputers. 
     cm is developed under Fortran 77 and has some licensing liminitions.
    </p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="N10011" />Shared Memeory Computing vs Distributed Memeory Computing</h2></div></div></div><p>
      cm uses OpenMP for shared memeory computing. 
      A shared memory system is relatively easy to program since all processors share a single view of data 
      and the communication between processors can be as fast as memory accesses to a same location. 
      However, CPU-to-memeory connection will eventually become a bottleneck. 
    </p><p>
      The distributed memory systems increase the CPU and memeory scalibility over shared memeory system, 
      but it is much harder to program. The MPI standard is used for message passing.  
    </p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="N10018" />Objectives of OpenCMISS</h2></div></div></div><p>
      OpenCMISS is re-engineering of CMISS cm component. 
      It is intended to give a library based approach to enable use in multiple applications.
      It is developed under Fortan 95 and Modular, easily extendable and programmable.
      It would be integrated with MPI to provide modular, easily extendable and programmable code which is applicatable 
      for either MPI based distributed system, OpenMP based shared memeory system and/or serial code. 
      It will be open sourced. 
    </p></div></div><div class="chapter" lang="en"><div class="titlepage"><div><div><h2 class="title"><a id="N1001D" />Chapter 2. OpenCMISS Concepts</h2></div></div></div><div class="toc"><p><b>Table of Contents</b></p><dl><dt><span class="section"><a href="#basis">Basis Functions</a></span></dt><dt><span class="section"><a href="#coordinate system">Coordinate Systems</a></span></dt><dt><span class="section"><a href="#regions">Regions</a></span></dt><dd><dl><dt><span class="section"><a href="#nodes">Nodes</a></span></dt><dt><span class="section"><a href="#mesh">Meshes</a></span></dt><dt><span class="section"><a href="#field">Fields</a></span></dt><dt><span class="section"><a href="#equation_set">Equations Sets</a></span></dt></dl></dd><dt><span class="section"><a href="#problem">Problems</a></span></dt><dd><dl><dt><span class="section"><a href="#N102B3">Solutions</a></span></dt><dt><span class="section"><a href="#control">Control</a></span></dt></dl></dd></dl></div><p>openCMISS has the following top level objects.</p><div class="itemizedlist"><ul type="disc"><li>Basis functions</li><li>Coordinate systems</li><li>Nodes</li><li>Regions</li><li>Problems</li><li>Computational environments</li><li>Base system(Diagnostics, I?O etc.)</li></ul></div><div class="mediaobject"><img src="../images/openCMISS_topStructure.JPG" width="486" /></div><div class="section" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="basis" />Basis Functions</h2></div></div></div><p>
      Basis functions are the key item to specify the field approximation/interpolation and the linking of nodes and elements to form a mesh.
      Currently, it has two types: Lagrange-Hermite tensor product and Simplex.
      Lagrange-Hermite tensor product can be further divided into linear to cubic lagrange, cubic and quadratic hermite. 
      It can be arbitrarily collapsed (two or more nodes in the same location) in any one direction or in any two directions to give a degenerate basis.
      Simplex basic functions could contain line, triangular and tetrahedral elements. 
      It could be linear, quadratic or cubic.
      Arbitrary Gaussian quadrature can integrate from 1st to 5th order (3rd  order for lines at the moment).
      Can only have the same order in each direction at the moment.
      Specifying a basis function automatically generates all necessary line and face basis functions as sub-bases of the basis function.
    </p><p>Basis function has the following attributes:</p><div class="itemizedlist"><ul type="disc"><li>User number</li><li>Global number</li><li>Family number</li><li>Finished tag</li><li>Type</li><li>Is Hermite</li><li>Number of XI</li><li>Number of XI coordinates</li><li>...</li></ul></div></div><div class="section" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="coordinate system" />Coordinate Systems</h2></div></div></div><p>
      Coordinate system is a system for assigning an n-tuple of numbers or scalars to each point in an n-dimensional space. 
      It anchors the regions within the real world. 
      Coordinate system can have different types such as:
    </p><div class="itemizedlist"><ul type="disc"><li>Rectangular cartesian</li><li>Cylindrical polar</li><li>Spherical polar</li><li>Prolate spheroidal</li><li>Oblate spheroidal</li></ul></div><p>
      There is a global (world) coordinate system aligned with 3D rectangular cartesian space.
    </p><p>Coordinate system has the following attributes:</p><div class="itemizedlist"><ul type="disc"><li>User number</li><li>Finished tag</li><li>Type</li><li>Number of dimensions</li><li>Focus (for prolate-spheriodal system only)</li><li>Origins</li><li>Orientation</li></ul></div></div><div class="section" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="regions" />Regions</h2></div></div></div><p>
      Regions are one of the primary objects in openCMISS. 
      Regions are hierarchical in nature in that a region can have one parent region and a number of daughter sub-regions. 
      Daughter regions are related in space to parent regions by an origin and an orientation of the regions coordinate system.
      Daughter regions may only have the same or fewer dimensions as the parent region.
      There is a global (world) region (number 0) that has the global (world) coordinate system.
    </p><div class="mediaobject"><img src="../images/region_definition.JPG" width="486" /></div><p>Region has the following attributes</p><div class="itemizedlist"><ul type="disc"><li>User number</li><li>Finished tag</li><li>Label</li><li>Number of sub(daughter) regions</li><li>Coordinate system pointer</li><li>Nodes</li><li>Meshes</li><li>Fields</li><li>Equations</li><li>Parent region pointer</li><li>Daughter regions pointers</li></ul></div><div class="mediaobject"><img src="../images/region_structure.JPG" width="486" /></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="Nodes&#10;        There are three places storing nodal information. &#10;        Nodes associated with region defines the nodes identification and the nodes geometric (initial) position. &#10;      Node has the following attributesUser numberGlobal numberLabelInitial Position">Return to top</a></p><div><h3 class="title"><a id="nodes" />Nodes</h3></div></div></div><p>
        There are three places storing nodal information. 
        Nodes associated with region defines the nodes identification and the nodes geometric (initial) position. 
      </p><p>Node has the following attributes</p><div class="itemizedlist"><ul type="disc"><li>User number</li><li>Global number</li><li>Label</li><li>Initial Position</li></ul></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="Meshes&#10;        Meshes are topological constructs within a region which fields use to define themselves.&#10;        Meshes are made up of a number of mesh components.&#10;        All mesh components in a mesh must “conform”, that is have the same number of elements, Xi directions etc. &#10;      Mesh has the following attributes:User numberGlobal numberFinished tagRegion pointerNumber of dimensionsNumber of componentsEmbedded flagEmbedding mesh pointerEmbedded meshes pointersNumber of elementsNumber of facesNumber of linesMesh topology pointersDecomposition pointersMesh Topology&#10;          Mesh components (Topology) are made up from nodes, elements and basis functions.&#10;          A new mesh component is required for each different form of interpolation e.g., one mesh component is bilinear Lagrange and another is biquadratic Lagrange.&#10;        Mesh topology has the following attributes:Mesh component numberMesh pointerNodes pointersElement pointersDOFs pointersDecompositions&#10;          Mesh decomposition (partitioning) is used to split a computationally expensive mesh into smaller subdomains (parts) for parallel computing. &#10;        Decomposition has the following attributesUser numberGlobal numberFinished tagMesh pointerMesh component numberDecomposition typeNumber of domainsNumber of edge cutElement domain numbersDecomposition topology pointerDomains pointers(list of domain which has the same size as the number of components in the mesh)DomainEach domain stores domain information for relevant mesh component.The domain object contains the following attributes:Decomposition pointerMesh pointerMesh component numberRegion pointerNumber of dimensionsNode domain(The domain number that the np'th global node is in for the domain decomposition. Note: the domain numbers start at 0 and go up to the NUMBER_OF_DOMAINS-1)Domain mappings(for each mapped object e.g. nodes, elements, etc)Domain topology pointer(elements, nodes, DOFs)Domain MappingsStores information for each mapped object e.g. nodes, elements, etc.The domain mapping contains the following attributes:Number of localTotal number of localNumbers of domain localNumber of globalNumber of domainsNumber of internalInternal listNumber of boundaryBoundary listNumber of ghostGhost listLocal to global mapGlobal to local mapNumber of adjacent domainsPointer to list of adjacent domains by domain numberList of adjacent domains">Return to top</a></p><div><h3 class="title"><a id="mesh" />Meshes</h3></div></div></div><p>
        Meshes are topological constructs within a region which fields use to define themselves.
        Meshes are made up of a number of mesh components.
        All mesh components in a mesh must “conform”, that is have the same number of elements, Xi directions etc. 
      </p><p>Mesh has the following attributes:</p><div class="itemizedlist"><ul type="disc"><li>User number</li><li>Global number</li><li>Finished tag</li><li>Region pointer</li><li>Number of dimensions</li><li>Number of components</li><li>Embedded flag</li><li>Embedding mesh pointer</li><li>Embedded meshes pointers</li><li>Number of elements</li><li>Number of faces</li><li>Number of lines</li><li>Mesh topology pointers</li><li>Decomposition pointers</li></ul></div><div class="mediaobject"><img src="../images/mesh_structure.JPG" width="486" /></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="Mesh Topology&#10;          Mesh components (Topology) are made up from nodes, elements and basis functions.&#10;          A new mesh component is required for each different form of interpolation e.g., one mesh component is bilinear Lagrange and another is biquadratic Lagrange.&#10;        Mesh topology has the following attributes:Mesh component numberMesh pointerNodes pointersElement pointersDOFs pointers">Return to top</a></p><div><h4 class="title"><a id="mesh_topology" />Mesh Topology</h4></div></div></div><p>
          Mesh components (Topology) are made up from nodes, elements and basis functions.
          A new mesh component is required for each different form of interpolation e.g., one mesh component is bilinear Lagrange and another is biquadratic Lagrange.
        </p><div class="mediaobject"><img src="../images/meshTopology_definition.JPG" width="486" /></div><p>Mesh topology has the following attributes:</p><div class="itemizedlist"><ul type="disc"><li>Mesh component number</li><li>Mesh pointer</li><li>Nodes pointers</li><li>Element pointers</li><li>DOFs pointers</li></ul></div><div class="mediaobject"><img src="../images/meshTopology_structure.JPG" width="486" /></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="Decompositions&#10;          Mesh decomposition (partitioning) is used to split a computationally expensive mesh into smaller subdomains (parts) for parallel computing. &#10;        Decomposition has the following attributesUser numberGlobal numberFinished tagMesh pointerMesh component numberDecomposition typeNumber of domainsNumber of edge cutElement domain numbersDecomposition topology pointerDomains pointers(list of domain which has the same size as the number of components in the mesh)DomainEach domain stores domain information for relevant mesh component.The domain object contains the following attributes:Decomposition pointerMesh pointerMesh component numberRegion pointerNumber of dimensionsNode domain(The domain number that the np'th global node is in for the domain decomposition. Note: the domain numbers start at 0 and go up to the NUMBER_OF_DOMAINS-1)Domain mappings(for each mapped object e.g. nodes, elements, etc)Domain topology pointer(elements, nodes, DOFs)Domain MappingsStores information for each mapped object e.g. nodes, elements, etc.The domain mapping contains the following attributes:Number of localTotal number of localNumbers of domain localNumber of globalNumber of domainsNumber of internalInternal listNumber of boundaryBoundary listNumber of ghostGhost listLocal to global mapGlobal to local mapNumber of adjacent domainsPointer to list of adjacent domains by domain numberList of adjacent domains">Return to top</a></p><div><h4 class="title"><a id="decomposition" />Decompositions</h4></div></div></div><p>
          Mesh decomposition (partitioning) is used to split a computationally expensive mesh into smaller subdomains (parts) for parallel computing. 
        </p><p>Decomposition has the following attributes</p><div class="itemizedlist"><ul type="disc"><li>User number</li><li>Global number</li><li>Finished tag</li><li>Mesh pointer</li><li>Mesh component number</li><li>Decomposition type</li><li>Number of domains</li><li>Number of edge cut</li><li>Element domain numbers</li><li>Decomposition topology pointer</li><li>Domains pointers(list of domain which has the same size as the number of components in the mesh)</li></ul></div><div class="mediaobject"><img src="../images/meshDecomposition_structure.JPG" width="486" /></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="DomainEach domain stores domain information for relevant mesh component.The domain object contains the following attributes:Decomposition pointerMesh pointerMesh component numberRegion pointerNumber of dimensionsNode domain(The domain number that the np'th global node is in for the domain decomposition. Note: the domain numbers start at 0 and go up to the NUMBER_OF_DOMAINS-1)Domain mappings(for each mapped object e.g. nodes, elements, etc)Domain topology pointer(elements, nodes, DOFs)Domain MappingsStores information for each mapped object e.g. nodes, elements, etc.The domain mapping contains the following attributes:Number of localTotal number of localNumbers of domain localNumber of globalNumber of domainsNumber of internalInternal listNumber of boundaryBoundary listNumber of ghostGhost listLocal to global mapGlobal to local mapNumber of adjacent domainsPointer to list of adjacent domains by domain numberList of adjacent domains">Return to top</a></p><div><h5 class="title"><a id="domain" />Domain</h5></div></div></div><p>Each domain stores domain information for relevant mesh component.</p><p>The domain object contains the following attributes:</p><div class="itemizedlist"><ul type="disc"><li>Decomposition pointer</li><li>Mesh pointer</li><li>Mesh component number</li><li>Region pointer</li><li>Number of dimensions</li><li>Node domain(The domain number that the np'th global node is in for the domain decomposition. Note: the domain numbers start at 0 and go up to the NUMBER_OF_DOMAINS-1)</li><li>Domain mappings(for each mapped object e.g. nodes, elements, etc)</li><li>Domain topology pointer(elements, nodes, DOFs)</li></ul></div><div class="mediaobject"><img src="../images/meshDecompositionDomain_structure.JPG" width="486" /></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="Domain MappingsStores information for each mapped object e.g. nodes, elements, etc.The domain mapping contains the following attributes:Number of localTotal number of localNumbers of domain localNumber of globalNumber of domainsNumber of internalInternal listNumber of boundaryBoundary listNumber of ghostGhost listLocal to global mapGlobal to local mapNumber of adjacent domainsPointer to list of adjacent domains by domain numberList of adjacent domains">Return to top</a></p><div><h6 class="title"><a id="domain_mapping" />Domain Mappings</h6></div></div></div><p>Stores information for each mapped object e.g. nodes, elements, etc.</p><p>The domain mapping contains the following attributes:</p><div class="itemizedlist"><ul type="disc"><li>Number of local</li><li>Total number of local</li><li>Numbers of domain local</li><li>Number of global</li><li>Number of domains</li><li>Number of internal</li><li>Internal list</li><li>Number of boundary</li><li>Boundary list</li><li>Number of ghost</li><li>Ghost list</li><li>Local to global map</li><li>Global to local map</li><li>Number of adjacent domains</li><li>Pointer to list of adjacent domains by domain number</li><li>List of adjacent domains</li></ul></div><div class="mediaobject"><img src="../images/meshDecompositionDomainMapping_structure.JPG" width="486" /></div></div></div></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="Fields&#10;        Fields are the central object for storing information and framing the problem.&#10;        Fields have a number of field variables i.e., u, ∂u/∂n, ∂u/∂t, ∂2u/∂t2.&#10;        Each field variable has a number of components.&#10;        A field is defined on a decomposed mesh.&#10;        Each field variable component is defined on a decomposed mesh component.&#10;      Field can contains the following attributes:User numberGlobal numberFinished tagRegion pointerType(Geometric, Fibre, General, Material, Source)Dependent type(Independent, Dependent)DimensionDecomposition pointerNumber of variablesVariablesScalings setsMappings(DOF-&gt;Field parameters)Parameter sets(distributed vectors)Geometric field pointerGeomatric field parametersCreate values cacheField variable&#10;          Field variable stores variables for the field such as dependent variables. &#10;          For example, in the Laplace's equation(FEM), it stores two variables: u and ∂u/∂n.&#10;          Each field variable has a number of components.  &#10;        Field variable has the following attributes:Variable numberVariable typeField pointerRegion pointerMax number of interpolation parametersNumber of DOFsTotal number of DOFsGlobal DOF ListDomain mapping pointerNumber of componentsComponentsField Variable ComponentField Variable Component has the following attributes:Component numberVariable pointerField pointerInterpolation typeMesh component numberScaling indexDomain pointerMax number of interpolation parametersMappings(Field paramters-&gt;DOF)Parameter setParameter set stores values for each field variable component.Parameter set has the following Attributes:Set indexSet typeParameters pointer">Return to top</a></p><div><h3 class="title"><a id="field" />Fields</h3></div></div></div><p>
        Fields are the central object for storing information and framing the problem.
        Fields have a number of field variables i.e., u, ∂u/∂n, ∂u/∂t, ∂2u/∂t2.
        Each field variable has a number of components.
        A field is defined on a decomposed mesh.
        Each field variable component is defined on a decomposed mesh component.
      </p><p>Field can contains the following attributes:</p><div class="itemizedlist"><ul type="disc"><li>User number</li><li>Global number</li><li>Finished tag</li><li>Region pointer</li><li>Type(Geometric, Fibre, General, Material, Source)</li><li>Dependent type(Independent, Dependent)</li><li>Dimension</li><li>Decomposition pointer</li><li>Number of variables</li><li>Variables</li><li>Scalings sets</li><li>Mappings(DOF-&gt;Field parameters)</li><li>Parameter sets(distributed vectors)</li><li>Geometric field pointer</li><li>Geomatric field parameters</li><li>Create values cache</li></ul></div><div class="mediaobject"><img src="../images/field_structure.JPG" width="486" /></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="Field variable&#10;          Field variable stores variables for the field such as dependent variables. &#10;          For example, in the Laplace's equation(FEM), it stores two variables: u and ∂u/∂n.&#10;          Each field variable has a number of components.  &#10;        Field variable has the following attributes:Variable numberVariable typeField pointerRegion pointerMax number of interpolation parametersNumber of DOFsTotal number of DOFsGlobal DOF ListDomain mapping pointerNumber of componentsComponentsField Variable ComponentField Variable Component has the following attributes:Component numberVariable pointerField pointerInterpolation typeMesh component numberScaling indexDomain pointerMax number of interpolation parametersMappings(Field paramters-&gt;DOF)">Return to top</a></p><div><h4 class="title"><a id="field_variable" />Field variable</h4></div></div></div><p>
          Field variable stores variables for the field such as dependent variables. 
          For example, in the Laplace's equation(FEM), it stores two variables: u and ∂u/∂n.
          Each field variable has a number of components.  
        </p><p>Field variable has the following attributes:</p><div class="itemizedlist"><ul type="disc"><li>Variable number</li><li>Variable type</li><li>Field pointer</li><li>Region pointer</li><li>Max number of interpolation parameters</li><li>Number of DOFs</li><li>Total number of DOFs</li><li>Global DOF List</li><li>Domain mapping pointer</li><li>Number of components</li><li>Components</li></ul></div><div class="mediaobject"><img src="../images/fieldVariable_structure.JPG" width="486" /></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="Field Variable ComponentField Variable Component has the following attributes:Component numberVariable pointerField pointerInterpolation typeMesh component numberScaling indexDomain pointerMax number of interpolation parametersMappings(Field paramters-&gt;DOF)">Return to top</a></p><div><h5 class="title"><a id="field_variable_component" />Field Variable Component</h5></div></div></div><p /><p>Field Variable Component has the following attributes:</p><div class="itemizedlist"><ul type="disc"><li>Component number</li><li>Variable pointer</li><li>Field pointer</li><li>Interpolation type</li><li>Mesh component number</li><li>Scaling index</li><li>Domain pointer</li><li>Max number of interpolation parameters</li><li>Mappings(Field paramters-&gt;DOF)</li></ul></div></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="Parameter setParameter set stores values for each field variable component.Parameter set has the following Attributes:Set indexSet typeParameters pointer">Return to top</a></p><div><h4 class="title"><a id="parameter_set" />Parameter set</h4></div></div></div><p>Parameter set stores values for each field variable component.</p><div class="mediaobject"><img src="../images/field_parameter_set_definition.JPG" width="486" /></div><p>Parameter set has the following Attributes:</p><div class="itemizedlist"><ul type="disc"><li>Set index</li><li>Set type</li><li>Parameters pointer</li></ul></div></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="Equations Sets&#10;        Equations sets are aimed to have multiple classes,&#10;        e.g. Elasticity, Fluid mechanics, Electromagnetics, General field problems, Fitting, Optimisation.&#10;        Different equations are within each class, e.g. Bidomain, Navier-stokes etc.&#10;        Each equation can use different solution techniques, e.g. FEM, BEM, FD, GFEM.&#10;        The equation set is associated with a region and is built using the fields defined on the region.&#10;      &#10;        The numerical methods are used which will result in a discretised matrix-vector form of the governing equations.&#10;        openCMISS is designed to generate equations sets with a number of &quot;equations&quot; matrices.&#10;      e.g, damped mass spring system&#10;        &#10;          Mü&#10;          +&#10;          Cù&#10;          +&#10;          Ku&#10;          =&#10;          f&#10;        &#10;      will be represented as:Equations Set has the following attributes:User numberGlobal numberFinished tagRegion pointerClass identifierType identifierSub type identifierLinearity type(?)Time dependence type(?)Solution methodGeometry (fibre?) field pointerMaterials field pointerSource field pointerDependent field pointerAnalytic info pointer(Analytic info stored in dependent field currently)Fixed conditionsEquations pointerEquationsEquation holds the matrices and mapping information.&#10;          The Field variable to matrix mappings maps each field variable onto the equations matrices or RHS vector. &#10;        e.g. Laplace(FEM): 2 variables, 1 componente.g. Laplace(BEM): 2 variables, 1 componente.g. Heat equation(explicit time/FEM space): 2 variables, 1 componentTODO matrix distributionEquations has the following attributes:Equation set pointerFinished tagOutput typeSparsity typeInterpolation pointerLinear equation data pointerNonlinear equation data pointerTime(non-static) data pointerEquations mapping pointerEquations Matrices">Return to top</a></p><div><h3 class="title"><a id="equation_set" />Equations Sets</h3></div></div></div><p>
        Equations sets are aimed to have multiple classes,
        e.g. Elasticity, Fluid mechanics, Electromagnetics, General field problems, Fitting, Optimisation.
        Different equations are within each class, e.g. Bidomain, Navier-stokes etc.
        Each equation can use different solution techniques, e.g. FEM, BEM, FD, GFEM.
        The equation set is associated with a region and is built using the fields defined on the region.
      </p><p>
        The numerical methods are used which will result in a discretised matrix-vector form of the governing equations.
        openCMISS is designed to generate equations sets with a number of "equations" matrices.
      </p><p>e.g, damped mass spring system</p><mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
        <mml:mrow>
          <mml:mi>Mü</mml:mi>
          <mml:mo>+</mml:mo>
          <mml:mi>Cù</mml:mi>
          <mml:mo>+</mml:mo>
          <mml:mi>Ku</mml:mi>
          <mml:mo>=</mml:mo>
          <mml:mi>f</mml:mi>
        </mml:mrow>
      </mml:math><p>will be represented as:</p><div class="mediaobject"><img src="../images/fieldEquationsets-matrix.JPG" width="486" /></div><p>Equations Set has the following attributes:</p><div class="itemizedlist"><ul type="disc"><li>User number</li><li>Global number</li><li>Finished tag</li><li>Region pointer</li><li>Class identifier</li><li>Type identifier</li><li>Sub type identifier</li><li>Linearity type(?)</li><li>Time dependence type(?)</li><li>Solution method</li><li>Geometry (fibre?) field pointer</li><li>Materials field pointer</li><li>Source field pointer</li><li>Dependent field pointer</li><li>Analytic info pointer(Analytic info stored in dependent field currently)</li><li>Fixed conditions</li><li>Equations pointer</li></ul></div><div class="mediaobject"><img src="../images/fieldEquationsets-structure.JPG" width="486" /></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="EquationsEquation holds the matrices and mapping information.&#10;          The Field variable to matrix mappings maps each field variable onto the equations matrices or RHS vector. &#10;        e.g. Laplace(FEM): 2 variables, 1 componente.g. Laplace(BEM): 2 variables, 1 componente.g. Heat equation(explicit time/FEM space): 2 variables, 1 componentTODO matrix distributionEquations has the following attributes:Equation set pointerFinished tagOutput typeSparsity typeInterpolation pointerLinear equation data pointerNonlinear equation data pointerTime(non-static) data pointerEquations mapping pointerEquations Matrices">Return to top</a></p><div><h4 class="title"><a id="equations" />Equations</h4></div></div></div><p>Equation holds the matrices and mapping information.</p><p>
          The Field variable to matrix mappings maps each field variable onto the equations matrices or RHS vector. 
        </p><p>e.g. Laplace(FEM): 2 variables, 1 component</p><div class="mediaobject"><img src="../images/fieldEquationsetsEquations-mappingFEM.JPG" width="486" /></div><p>e.g. Laplace(BEM): 2 variables, 1 component</p><div class="mediaobject"><img src="../images/fieldEquationsetsEquations-mappingBEM.JPG" width="486" /></div><p>e.g. Heat equation(explicit time/FEM space): 2 variables, 1 component</p><div class="mediaobject"><img src="../images/fieldEquationsetsEquations-mappingHeat.JPG" width="486" /></div><p>TODO matrix distribution</p><p>Equations has the following attributes:</p><div class="itemizedlist"><ul type="disc"><li>Equation set pointer</li><li>Finished tag</li><li>Output type</li><li>Sparsity type</li><li>Interpolation pointer</li><li>Linear equation data pointer</li><li>Nonlinear equation data pointer</li><li>Time(non-static) data pointer</li><li>Equations mapping pointer</li><li>Equations Matrices</li></ul></div><div class="mediaobject"><img src="../images/fieldEquationsetsEquations-structure.JPG" width="486" /></div></div></div></div><div class="section" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="problem" />Problems</h2></div></div></div><p>
      A problem has a number of solutions (each with their solver) inside a problem control loop. 
      Problem associated with region via solution which maps to equations sets and hence links to region. 
      Multiple problems can be in the same region, or multiple regions can woek to solve one problem. 
    </p><p>Problem has the following attributes:</p><div class="itemizedlist"><ul type="disc"><li>User number</li><li>Global number</li><li>Finished tag</li><li>Class</li><li>Type</li><li>Subtype</li><li>Control pointer</li><li>Number of solutions</li><li>Soultions pointer</li></ul></div><div class="mediaobject"><img src="../images/problem_structure.JPG" width="486" /></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="SolutionsSolution has the following attributes:Solution numberFinished tagLinear solution data pointerNonlinear solution data pointerTime (non-static) solution data pointerEquations set to add (the next equations set to add)Index of added equations set(the last successfully added equations set)Soultion mapping(which contains equations sets)Solver pointerSolversSolver has the following attributes:Solution pointerFinished tagSolve typeOutput typeSparsity typeLinear solver pointerNon-linear solver pointerTime integrationn solver pointerEigenproblem solver pointerSolver matrices">Return to top</a></p><div><h3 class="title"><a id="N102B3" />Solutions</h3></div></div></div><p>Solution has the following attributes:</p><div class="itemizedlist"><ul type="disc"><li>Solution number</li><li>Finished tag</li><li>Linear solution data pointer</li><li>Nonlinear solution data pointer</li><li>Time (non-static) solution data pointer</li><li>Equations set to add (the next equations set to add)</li><li>Index of added equations set(the last successfully added equations set)</li><li>Soultion mapping(which contains equations sets)</li><li>Solver pointer</li></ul></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="SolversSolver has the following attributes:Solution pointerFinished tagSolve typeOutput typeSparsity typeLinear solver pointerNon-linear solver pointerTime integrationn solver pointerEigenproblem solver pointerSolver matrices">Return to top</a></p><div><h4 class="title"><a id="N102CB" />Solvers</h4></div></div></div><p>Solver has the following attributes:</p><div class="itemizedlist"><ul type="disc"><li>Solution pointer</li><li>Finished tag</li><li>Solve type</li><li>Output type</li><li>Sparsity type</li><li>Linear solver pointer</li><li>Non-linear solver pointer</li><li>Time integrationn solver pointer</li><li>Eigenproblem solver pointer</li><li>Solver matrices</li></ul></div><div class="mediaobject"><img src="../images/problemSolutionSolver_structure.JPG" width="486" /></div></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="ControlControl has the following attributes:Problem pointerFinished tagControl type">Return to top</a></p><div><h3 class="title"><a id="control" />Control</h3></div></div></div><p>Control has the following attributes:</p><div class="itemizedlist"><ul type="disc"><li>Problem pointer</li><li>Finished tag</li><li>Control type</li></ul></div></div></div></div><div class="chapter" lang="en"><div class="titlepage"><div><div><h2 class="title"><a id="N102F8" />Chapter 3. Obtaining the Code and Setting up the development environment</h2></div></div></div><div class="toc"><p><b>Table of Contents</b></p><dl><dt><span class="sect1"><a href="#N102FB">Obtaining the Code</a></span></dt><dt><span class="sect1"><a href="#N10321">Project Set up</a></span></dt><dd><dl><dt><span class="sect2"><a href="#N10324">On AIX 5.3</a></span></dt><dt><span class="sect2"><a href="#N1032F">On Ubuntu 8.04</a></span></dt><dt><span class="sect2"><a href="#N10365">On Windows XP (Visual Studio 2005)</a></span></dt><dt><span class="sect2"><a href="#N10397">On Windows Vista (Visual Studio 2008)</a></span></dt></dl></dd></dl></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="N102FB" />Obtaining the Code</h2></div></div></div><p>
      To obtain the openCMISS source you need to check it out from the subversion repository. There are two parts to openCMISS to obtain - openCMISS itself and the various libraries it needs.
    </p><div class="literallayout"><p><span style="white-space: pre;">To check out the main trunk of openCMISS issue the following commands:<span><strong class="command">
      cd place-where-you-want-to-put-your-working-copy
      mkdir opencmiss
      cd opencmiss
      svn co https://opencmiss.svn.sourceforge.net/svnroot/opencmiss/cm/trunk cm</strong></span></span></p></div><div class="literallayout"><p><span style="white-space: pre;">To check out the main trunk of the various libraries required with openCMISS issue the following commands:<span><strong class="command">
      cd place-where-you-want-to-put-your-working-copy
      mkdir opencmissextras
      cd opencmissextras
      svn co http://www.physiome.ox.ac.uk/svn/opencmissextras/cm/trunk/external/architecture cm/external/architecture</strong></span></span></p></div><p>
      where architecture is the appropriate architecture for the machine. Possible architectures are:
    </p><div class="itemizedlist"><ul type="disc"><li>i386-win32</li><li>i386-win32-debug</li><li>i686-linux</li><li>i686-linux-debug</li><li>x86_64-linux</li><li>x86_64-linux-debug</li><li>rs6000-32-aix</li><li>rs6000-32-aix-debug</li></ul></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="N10321" />Project Set up</h2></div></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="N10324" />On AIX 5.3</h3></div></div></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a id="N10327" />Set environment</h4></div></div></div>
        Set environment variable to point to openCMISS
        Set environment variable to point to openCMISS-extras
      </div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a id="N1032B" />Compile</h4></div></div></div>
        Change directory to opencmiss/cm
        Use gmake.
        This should result in a binary that you can run, but you will need to set-up for MPI (hosts file etc).
        The main program is in opencmisstest.f90.
      </div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="N1032F" />On Ubuntu 8.04</h3></div></div></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a id="N10332" />Set environment</h4></div></div></div><p>Set environment variable to point to opencmiss</p><span><strong class="command">setenv OPENCMISS_ROOT=&lt;path for your opencmiss folder&gt;</strong></span><p>Set environment variable to point to opencmiss-extras</p><span><strong class="command">setenv OPENCMISSEXTRAS_ROOT=&lt;path for your opencmissextras folder&gt;</strong></span><p>Add opencmiss and opencmiss extra paths</p></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a id="N10341" />Install Compilers</h4></div></div></div><p>Install Intel Fortran Compiler</p><p>Extract the file and follow the install.htm to install</p></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a id="N10349" />Install MPI</h4></div></div></div><p>Install MPICH2</p><p>Extract the file and follow the README to install</p><p>Remember to set the path</p></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a id="N10353" />Compile</h4></div></div></div><p>To build the project:</p><span><strong class="command">make</strong></span><p>To run the project:</p><span><strong class="command">mpd &amp; mpirun -n 2 path/to/the/execution/file</strong></span><p>To debug the project using TotalView:</p><span><strong class="command">mpd &amp; mpirun -tv 2 path/to/the/execution/file</strong></span></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="N10365" />On Windows XP (Visual Studio 2005)</h3></div></div></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a id="N10368" />Set environment</h4></div></div></div><p>Modify the Fortran project properties for the link to OpenCMISS-extra</p></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a id="N1036D" />Install Compilers</h4></div></div></div><p>Install Intel Fortran Compiler</p><p>Execute the exe file and follow the installation wizard, you night need to have direct access to internet to install</p></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a id="N10375" />Install MPI</h4></div></div></div><p>Install MPICH2</p><p>You can either download the source archive and follow the README.windows file to install or download the installer to install.</p><p>Set bin folder to the path</p><p>To start the MPI, run smpd -start</p><p>NOTE: as from MPICH2 version 1.0.7 the library names have changed. libmpich2 has now become libmpi!</p></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a id="N10383" />Compile and Debug</h4></div></div></div><p>Build the Fortran project under the debug mode and generate the opencmisstest-debug.exe file.</p><p>In the C Project (since the Fortran projects do not support MPI cluster debugger), configure the debugging properties according to this.</p><p>The MPIShim location is in the path similar to C:\Program Files\Microsoft Visual Studio 8\Common7\IDE\Remote Debugger\x86\mpishim.exe.</p><p>Debug the C project.</p></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a id="N1038F" />Run</h4></div></div></div><p>To run the project in the command window:</p><span><strong class="command">mpiexec -n 2 -localroot bin\i386-win32\opencmisstest-debug.exe</strong></span></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="N10397" />On Windows Vista (Visual Studio 2008)</h3></div></div></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a id="N1039A" />Install Compilers</h4></div></div></div><p>Install Intel Fortran Compiler</p><p>Execute the exe file and follow the installation wizard, you night need to have direct access to internet to install</p></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a id="N103A2" />Install MPI</h4></div></div></div><p>Before you install MPICH2 under Vista you must turn off User Account Control</p><div class="orderedlist"><ol type="1"><li>Goto Start -&gt; Control Panel</li><li>Double-click on User Accounts</li><li>Click "Turn User Account Control on or off"</li><li>Untick "Use User Account Control (UAC) to help protect your computer" and click OK</li><li>Restart your computer.</li></ol></div><p>Download from here. Choose the Win32 IA32 (binary) option.</p><p>Run the downloaded .msi file. Follow all instructions and install "For everybody".</p><p>Once you have installed MPICH2 you can turn User Account Control back on. Follow the instructions above and in 4. tick the "Use User Account Control ...".</p><p>NOTE: as from MPICH2 version 1.0.7 the library names have changed. libmpich2 has now become libmpi!</p></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a id="N103BD" />Optional: Compiling PETSc</h4></div></div></div><p>Note this is assuming you have the Intel Fortran compiler version 10.1.024. Adjust the version string as necessary.</p><div class="itemizedlist"><ul type="disc"><li>Install Cygwin if you need to. Cywin can be found here. Make sure you include the make and python modules when you install.</li><li>Lauch a Command Prompt Window</li><li>Run the ifortvars.bat batch file to setup your Intel Fortran environment. e.g., "C:\Program Files\Intel\Compiler\Fortran\10.1.024\IA32\Bin\ifortvars.bat"</li><li>Run the Cygwin batch file to setup the unix environment e.g., "C:\Cygwin\Cygwin.bat"</li><li>Change to the opencmissextras PETSc directory e.g., if opencmissextras root is E:\opencmissextras and we are compiling PETSC version petsc-2.3.3-p8 then "cd /cygwin/e/opencmissextras/cm/external/packages/PETSc/petsc-2.3.3-p8"</li><li>If you have MPICH2 version 1.0.7 or greater edit the python/BuildSystem/config/packages/MPI.py file. Find the self.liblist_mpich line. After the line "['fmpich2.lib','mpich2.lib']," add the line "['fmpich2.lib','mpi.lib'],".</li><li>Compile and Install PETSC:</li></ul></div><p>For a debug install issue the following commands</p><span><strong class="command">
          <p>PETSC_DIR=/cygdrive/e/opencmissextras/cm/external/packages/PETSc/petsc-2.3.3-p8; export PETSC_DIR</p>
          <p>PETSC_ARCH=cygwin-c-debug; export PETSC_ARCH</p>
          <p>config/configure.py --prefix=/cygdrive/e/opencmissextras/cm/external/i386-win32-debug --with-shared=no --with-cc='win32fe cl' --with-fc='win32fe ifort' --with-cxx='win32fe cl' --download-f-blas-lapack=1 LIBS=-L'/cygdrive/c/Program\ Files/Intel/Compiler/Fortran/10.1.024/IA32/Lib' --with-debugging=yes</p>
          <p>PETSC_ARCH=cygwin-c-debug; export PETSC_ARCH</p>
          <p>make -e all</p>
          <p>make -e install</p>
        </strong></span><p>For a non-debug install issue the following commands</p><span><strong class="command">
          <p>PETSC_DIR=/cygdrive/e/opencmissextras/cm/external/packages/PETSc/petsc-2.3.3-p8; export PETSC_DIR</p>
          <p>PETSC_ARCH=cygwin-c-opt; export PETSC_ARCH</p>
          <p>config/configure.py --prefix=/cygdrive/e/opencmissextras/cm/external/i386-win32 --with-shared=no --with-cc='win32fe cl' --with-fc='win32fe ifort' --with-cxx='win32fe cl' --download-f-blas-lapack=1 LIBS=-L'/cygdrive/c/Program\ Files/Intel/Compiler/Fortran/10.1.024/IA32/Lib' --with-debugging=no</p>
          <p>PETSC_ARCH=cygwin-c-opt; export PETSC_ARCH</p>
          <p>make -e all</p>
          <p>make -e install</p>
        </strong></span></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a id="N103FF" />Compile</h4></div></div></div><p>Go to the openCMISS/cm directory that you have downloaded openCMISS from SVN into. Go into the VisualopenCMISS_08 folder. Double click the VisualopenCMISS project solution file to lauch Visual Studio.</p></div></div></div></div><div class="chapter" lang="en"><div class="titlepage"><div><div><h2 class="title"><a id="N10404" />Chapter 4. Object Interface</h2></div></div></div></div><div class="chapter" lang="en"><div class="titlepage"><div><div><h2 class="title"><a id="N10407" />Chapter 5. A simple program - Laplace</h2></div></div></div></div><div class="chapter" lang="en"><div class="titlepage"><div><div><h2 class="title"><a id="N1040A" />Chapter 6. Library Commands</h2></div></div></div><div class="toc"><p><b>Table of Contents</b></p><dl><dt><span class="sect1"><a href="#N1040D">Top level</a></span></dt><dt><span class="sect1"><a href="#N10410">Basis functions</a></span></dt><dt><span class="sect1"><a href="#N10413">Coordinate Systems</a></span></dt><dt><span class="sect1"><a href="#N10416">Regions</a></span></dt><dt><span class="sect1"><a href="#N10419">Problems</a></span></dt></dl></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="N1040D" />Top level</h2></div></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="N10410" />Basis functions</h2></div></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="N10413" />Coordinate Systems</h2></div></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="N10416" />Regions</h2></div></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="N10419" />Problems</h2></div></div></div></div></div><div class="chapter" lang="en"><div class="titlepage"><div><div><h2 class="title"><a id="N1041C" />Chapter 7. Coding Style</h2></div></div></div>
  This is an attempt to document the programming "style" for use with openCMISS.
  <div class="itemizedlist"><ul type="disc"><li>Within a module all named constants and procedure names should be prefixed by a name indicating that module so as to maintain a namespace.</li><li>All dynamic arrays should be ALLOCATABLE rather than POINTER unless full pointer functionality is required.</li><li>A double space should be used for an indent. Tabs should not be used to indent code.</li><li>All pointers should be checked to see if they are ASSOCIATED before de-referencing them.</li><li>If there is just a single statement following an IF clause use the inline form of the IF statement and do not use THEN and ENDIF.</li><li>There should be a space before the first continuation character and a space after the second continuation character when continuing lines.</li><li>Use standard loop variable names e.g., nn, component_idx, when looping rather than temporary variable names.</li><li>When using case statements put in all known values of the the case variable and use a CALL FLAG_ERROR("Not implemented", ... statement if the code for the case variable has yet to be coded.</li><li>Use a !================... line between subroutines and functions</li><li>For dummy array arguments the dimension qualifier should be with the array name i.e., use INTEGER(INTG) :: FRED(N) rather than INTEGER(INTG), DIMENSION(N) :: FRED.</li></ul></div></div></div></body></html>