<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><title>OpenCMISS Programmer Documentation</title><meta content="DocBook XSL Stylesheets V1.68.1" name="generator" /></head><body><div class="book" lang="en"><div class="titlepage"><div><div><h1 class="title"><a id="N10001" />OpenCMISS Programmer Documentation</h1></div></div><hr /></div><div class="toc"><p><b>Table of Contents</b></p><dl><dt><span class="chapter"><a href="#N10005">1. Introduction</a></span></dt><dd><dl><dt><span class="sect1"><a href="#N1000A">CMISS</a></span></dt><dt><span class="sect1"><a href="#N10011">Shared Memory Computing vs Distributed Memory Computing</a></span></dt><dt><span class="sect1"><a href="#N10018">Objectives of OpenCMISS</a></span></dt></dl></dd><dt><span class="chapter"><a href="#N1001D">2. OpenCMISS Concepts</a></span></dt><dd><dl><dt><span class="section"><a href="#basis">Basis Functions</a></span></dt><dt><span class="section"><a href="#coordinate system">Coordinate Systems</a></span></dt><dt><span class="section"><a href="#regions">Regions</a></span></dt><dd><dl><dt><span class="section"><a href="#nodes">Nodes</a></span></dt><dt><span class="section"><a href="#mesh">Meshes</a></span></dt><dt><span class="section"><a href="#field">Fields</a></span></dt><dt><span class="section"><a href="#equation_set">Equations Sets</a></span></dt></dl></dd><dt><span class="section"><a href="#problem">Problems</a></span></dt><dd><dl><dt><span class="section"><a href="#N1033B">Solutions</a></span></dt><dt><span class="section"><a href="#control">Control</a></span></dt></dl></dd></dl></dd><dt><span class="chapter"><a href="#N10388">3. Obtaining the Code and Setting up the Development Environment</a></span></dt><dd><dl><dt><span class="section"><a href="#N1038B">Obtaining the Code and Libraries</a></span></dt><dd><dl><dt><span class="section"><a href="#N1039A">Obtain the Code</a></span></dt><dt><span class="section"><a href="#N103AD">Obtain the Libraries</a></span></dt><dt><span class="section"><a href="#N103D3">Makefile Structure</a></span></dt></dl></dd><dt><span class="section"><a href="#N103D8">Programmer documentation</a></span></dt><dt><span class="section"><a href="#N103F9">Project Set up</a></span></dt><dd><dl><dt><span class="section"><a href="#N103FC">On AIX 5.3 (HPC)</a></span></dt><dt><span class="section"><a href="#N10438">On Ubuntu 8.04</a></span></dt><dt><span class="section"><a href="#N1047B">On Windows XP (Visual Studio 2005)</a></span></dt><dt><span class="section"><a href="#N104C3">On Windows Vista (Visual Studio 2008)</a></span></dt></dl></dd><dt><span class="section"><a href="#N104F4">Libraries Build (Optional)</a></span></dt><dd><dl><dt><span class="section"><a href="#N104F7">Compiling PETSc</a></span></dt></dl></dd></dl></dd><dt><span class="chapter"><a href="#N10576">4. Project Tracker</a></span></dt><dd><dl><dt><span class="sect1"><a href="#N1057F">Tips</a></span></dt></dl></dd><dt><span class="chapter"><a href="#N1058F">5. Object Interface</a></span></dt><dd><dl><dt><span class="section"><a href="#N10592">Objectives</a></span></dt><dt><span class="section"><a href="#N1059C">General Rules</a></span></dt><dt><span class="section"><a href="#N105C0">Example(Basis functions)</a></span></dt></dl></dd><dt><span class="chapter"><a href="#N10645">6. Examples</a></span></dt><dd><dl><dt><span class="section"><a href="#N10648">Laplace equation</a></span></dt></dl></dd><dt><span class="chapter"><a href="#N109E3">7. Library Commands</a></span></dt><dd><dl><dt><span class="section"><a href="#N109E7">Top level</a></span></dt><dd><dl><dt><span class="section"><a href="#N109EA">cmiss</a></span></dt></dl></dd><dt><span class="section"><a href="#N109ED">Basis functions</a></span></dt><dt><span class="section"><a href="#N109F0">Coordinate Systems</a></span></dt><dt><span class="section"><a href="#N109F3">Regions</a></span></dt><dd><dl><dt><span class="section"><a href="#N109F6">Node</a></span></dt><dt><span class="section"><a href="#N109F9">Mesh</a></span></dt><dt><span class="section"><a href="#N109FC">Field</a></span></dt><dt><span class="section"><a href="#N109FF">Equations Set</a></span></dt></dl></dd><dt><span class="section"><a href="#N10A02">Problems</a></span></dt><dd><dl><dt><span class="section"><a href="#N10A05">Solver</a></span></dt></dl></dd></dl></dd><dt><span class="chapter"><a href="#N10A08">8. Coding Style</a></span></dt></dl></div><div class="chapter" lang="en"><div class="titlepage"><div><div><h2 class="title"><a id="N10005" />Chapter 1. Introduction</h2></div></div></div><div class="toc"><p><b>Table of Contents</b></p><dl><dt><span class="sect1"><a href="#N1000A">CMISS</a></span></dt><dt><span class="sect1"><a href="#N10011">Shared Memory Computing vs Distributed Memory Computing</a></span></dt><dt><span class="sect1"><a href="#N10018">Objectives of OpenCMISS</a></span></dt></dl></div><p>
    OpenCMISS is a project for the re-engineering of the CMISS computational engine.
  </p><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="N1000A" />CMISS</h2></div></div></div><p>
      CMISS is an interactive computer program for Continuum Mechanics, Image analysis, Signal processing 
      and System Identification.
      It provides a mathematical modelling environment that allows the application of finite element analysis, 
      boundary element and collocation techniques to a variety of complex bioengineering problems. 
    </p><p>
     CMISS consists of two main components, cmgui and cm. 
     cmgui is a graphical front end with advanced 3D display and modelling capabilities. 
     It is the open source project written in C/C++.   
     cm is a computational backend that may be run remotely on powerful workstations or supercomputers. 
     cm is developed under Fortran 77 and has some licensing limitations.
    </p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="N10011" />Shared Memory Computing vs Distributed Memory Computing</h2></div></div></div><p>
      cm uses OpenMP for shared memory computing. 
      A shared memory system is relatively easy to program since all processors share a single view of data 
      and the communication between processors can be as fast as memory accesses to a shared location. 
      However, the CPU-to-memory connection will eventually become a bottleneck. 
    </p><p>
      Distributed memory systems have increased CPU and memory scalibility compared to shared memory systems, 
      but are much harder to program. The MPI standard is used for message passing.  
    </p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="N10018" />Objectives of OpenCMISS</h2></div></div></div><p>
      OpenCMISS is re-engineering of CMISS cm component. 
      It is intended to give a library based approach to enable use in multiple applications.
      It is developed under Fortan 95 and Modular, easily extendable and programmable.
      It will be integrated with MPI to provide modular, easily extendable and programmable code which is applicable 
      for either MPI based distributed system, OpenMP based shared memory system and/or serial code. 
      It will be open sourced. 
    </p></div></div><div class="chapter" lang="en"><div class="titlepage"><div><div><h2 class="title"><a id="N1001D" />Chapter 2. OpenCMISS Concepts</h2></div></div></div><div class="toc"><p><b>Table of Contents</b></p><dl><dt><span class="section"><a href="#basis">Basis Functions</a></span></dt><dt><span class="section"><a href="#coordinate system">Coordinate Systems</a></span></dt><dt><span class="section"><a href="#regions">Regions</a></span></dt><dd><dl><dt><span class="section"><a href="#nodes">Nodes</a></span></dt><dt><span class="section"><a href="#mesh">Meshes</a></span></dt><dt><span class="section"><a href="#field">Fields</a></span></dt><dt><span class="section"><a href="#equation_set">Equations Sets</a></span></dt></dl></dd><dt><span class="section"><a href="#problem">Problems</a></span></dt><dd><dl><dt><span class="section"><a href="#N1033B">Solutions</a></span></dt><dt><span class="section"><a href="#control">Control</a></span></dt></dl></dd></dl></div><p>openCMISS has the following top level objects.</p><div class="itemizedlist"><ul type="disc"><li>Basis functions</li><li>Coordinate systems</li><li>Nodes</li><li>Regions</li><li>Problems</li><li>Computational environments</li><li>Base system(Diagnostics, I?O etc.)</li></ul></div><div class="mediaobject"><img src="../images/openCMISS_topStructure.JPG" width="486" /></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h2 class="title" style="clear: both"><a id="basis" />Basis Functions</h2></div></div></div><p>
      Basis functions are the key item to specify the field approximation/interpolation and the linking of nodes and elements to form a mesh.
      Currently, it has two types: Lagrange-Hermite tensor product and Simplex.
      Lagrange-Hermite tensor product can be further divided into linear to cubic lagrange, cubic and quadratic hermite. 
      It can be arbitrarily collapsed (two or more nodes in the same location) in any one direction or in any two directions to give a degenerate basis.
      Simplex basic functions could contain line, triangular and tetrahedral elements. 
      It could be linear, quadratic or cubic.
      Arbitrary Gaussian quadrature can integrate from 1st to 5th order (3rd  order for lines at the moment).
      Can only have the same order in each direction at the moment.
      Specifying a basis function automatically generates all necessary line and face basis functions as sub-bases of the basis function.
    </p><p>Basis function has the following attributes:</p><div class="itemizedlist"><ul type="disc"><li>User number</li><li>Global number</li><li>Family number</li><li>Finished tag</li><li>Type</li><li>Is Hermite</li><li>Number of XI</li><li>Number of XI coordinates</li><li>...</li></ul></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h2 class="title" style="clear: both"><a id="coordinate system" />Coordinate Systems</h2></div></div></div><p>
      Coordinate system is a system for assigning an n-tuple of numbers or scalars to each point in an n-dimensional space. 
      It anchors the regions within the real world. 
      Coordinate system can have different types such as:
    </p><div class="itemizedlist"><ul type="disc"><li>Rectangular cartesian</li><li>Cylindrical polar</li><li>Spherical polar</li><li>Prolate spheroidal</li><li>Oblate spheroidal</li></ul></div><p>
      There is a global (world) coordinate system aligned with 3D rectangular cartesian space.
    </p><p>Coordinate system has the following attributes:</p><div class="itemizedlist"><ul type="disc"><li>User number</li><li>Finished tag</li><li>Type</li><li>Number of dimensions</li><li>Focus (for prolate-spheriodal system only)</li><li>Origins</li><li>Orientation</li></ul></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h2 class="title" style="clear: both"><a id="regions" />Regions</h2></div></div></div><p>
      Regions are one of the primary objects in openCMISS. 
      Regions are hierarchical in nature in that a region can have one parent region and a number of daughter sub-regions. 
      Daughter regions are related in space to parent regions by an origin and an orientation of the regions coordinate system.
      Daughter regions may only have the same or fewer dimensions as the parent region.
      There is a global (world) region (number 0) that has the global (world) coordinate system.
    </p><div class="mediaobject"><img src="../images/region_definition.JPG" width="486" /></div><p>Region has the following attributes</p><div class="itemizedlist"><ul type="disc"><li>User number</li><li>Finished tag</li><li>Label</li><li>Number of sub(daughter) regions</li><li>Coordinate system pointer</li><li>Nodes</li><li>Meshes</li><li>Fields</li><li>Equations</li><li>Parent region pointer</li><li>Daughter regions pointers</li></ul></div><div class="mediaobject"><img src="../images/region_structure.JPG" width="486" /></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h3 class="title"><a id="nodes" />Nodes</h3></div></div></div><p>
        There are three places storing nodal information. 
        Nodes associated with region defines the nodes identification and the nodes geometric (initial) position. 
      </p><p>Node has the following attributes</p><div class="itemizedlist"><ul type="disc"><li>User number</li><li>Global number</li><li>Label</li><li>Initial Position</li></ul></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h3 class="title"><a id="mesh" />Meshes</h3></div></div></div><p>
        Meshes are topological constructs within a region which fields use to define themselves.
        Meshes are made up of a number of mesh components.
        All mesh components in a mesh must “conform”, that is have the same number of elements, Xi directions etc. 
      </p><p>Mesh has the following attributes:</p><div class="itemizedlist"><ul type="disc"><li>User number</li><li>Global number</li><li>Finished tag</li><li>Region pointer</li><li>Number of dimensions</li><li>Number of components</li><li>Embedded flag</li><li>Embedding mesh pointer</li><li>Embedded meshes pointers</li><li>Number of elements</li><li>Number of faces</li><li>Number of lines</li><li>Mesh topology pointers</li><li>Decomposition pointers</li></ul></div><div class="mediaobject"><img src="../images/mesh_structure.JPG" width="486" /></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h4 class="title"><a id="mesh_topology" />Mesh Topology</h4></div></div></div><p>
          Mesh components (Topology) are made up from nodes, elements and basis functions.
          A new mesh component is required for each different form of interpolation e.g., one mesh component is bilinear Lagrange and another is biquadratic Lagrange.
        </p><div class="mediaobject"><img src="../images/meshTopology_definition.JPG" width="486" /></div><p>Mesh topology has the following attributes:</p><div class="itemizedlist"><ul type="disc"><li>Mesh component number</li><li>Mesh pointer</li><li>Nodes pointers</li><li>Element pointers</li><li>DOFs pointers</li></ul></div><div class="mediaobject"><img src="../images/meshTopology_structure.JPG" width="486" /></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h4 class="title"><a id="decomposition" />Decompositions</h4></div></div></div><p>
          Mesh decomposition (partitioning) is used to split a computationally expensive mesh into smaller subdomains (parts) for parallel computing. 
        </p><p>Decomposition has the following attributes</p><div class="itemizedlist"><ul type="disc"><li>User number</li><li>Global number</li><li>Finished tag</li><li>Mesh pointer</li><li>Mesh component number</li><li>Decomposition type</li><li>Number of domains</li><li>Number of edge cut</li><li>Element domain numbers</li><li>Decomposition topology pointer</li><li>Domains pointers(list of domain which has the same size as the number of components in the mesh)</li></ul></div><div class="mediaobject"><img src="../images/meshDecomposition_structure.JPG" width="486" /></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h5 class="title"><a id="domain" />Domain</h5></div></div></div><p>Each domain stores domain information for relevant mesh component.</p><p>The domain object contains the following attributes:</p><div class="itemizedlist"><ul type="disc"><li>Decomposition pointer</li><li>Mesh pointer</li><li>Mesh component number</li><li>Region pointer</li><li>Number of dimensions</li><li>Node domain(The domain number that the np'th global node is in for the domain decomposition. Note: the domain numbers start at 0 and go up to the NUMBER_OF_DOMAINS-1)</li><li>Domain mappings(for each mapped object e.g. nodes, elements, etc)</li><li>Domain topology pointer(elements, nodes, DOFs)</li></ul></div><div class="mediaobject"><img src="../images/meshDecompositionDomain_structure.JPG" width="486" /></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h6 class="title"><a id="domain_mapping" />Domain Mappings</h6></div></div></div><p>Stores information for each mapped object e.g. nodes, elements, etc.</p><p>The domain mapping contains the following attributes:</p><div class="itemizedlist"><ul type="disc"><li>Number of local</li><li>Total number of local</li><li>Numbers of domain local</li><li>Number of global</li><li>Number of domains</li><li>Number of internal</li><li>Internal list</li><li>Number of boundary</li><li>Boundary list</li><li>Number of ghost</li><li>Ghost list</li><li>Local to global map</li><li>Global to local map</li><li>Number of adjacent domains</li><li>Pointer to list of adjacent domains by domain number</li><li>List of adjacent domains</li></ul></div><div class="mediaobject"><img src="../images/meshDecompositionDomainMapping_structure.JPG" width="486" /></div></div></div></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h3 class="title"><a id="field" />Fields</h3></div></div></div><p>
        Fields are the central object for storing information and framing the problem.
        Fields have a number of field variables i.e., u, ∂u/∂n, ∂u/∂t, ∂2u/∂t2.
        Each field variable has a number of components.
        A field is defined on a decomposed mesh.
        Each field variable component is defined on a decomposed mesh component.
      </p><p>Field can contains the following attributes:</p><div class="itemizedlist"><ul type="disc"><li>User number</li><li>Global number</li><li>Finished tag</li><li>Region pointer</li><li>Type(Geometric, Fibre, General, Material, Source)</li><li>Dependent type(Independent, Dependent)</li><li>Dimension</li><li>Decomposition pointer</li><li>Number of variables</li><li>Variables</li><li>Scalings sets</li><li>Mappings(DOF-&gt;Field parameters)</li><li>Parameter sets(distributed vectors)</li><li>Geometric field pointer</li><li>Geomatric field parameters</li><li>Create values cache</li></ul></div><div class="mediaobject"><img src="../images/field_structure.JPG" width="486" /></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h4 class="title"><a id="field_variable" />Field variable</h4></div></div></div><p>
          Field variable stores variables for the field such as dependent variables. 
          For example, in the Laplace's equation(FEM), it stores two variables: u and ∂u/∂n.
          Each field variable has a number of components.  
        </p><p>Field variable has the following attributes:</p><div class="itemizedlist"><ul type="disc"><li>Variable number</li><li>Variable type</li><li>Field pointer</li><li>Region pointer</li><li>Max number of interpolation parameters</li><li>Number of DOFs</li><li>Total number of DOFs</li><li>Global DOF List</li><li>Domain mapping pointer</li><li>Number of components</li><li>Components</li></ul></div><div class="mediaobject"><img src="../images/fieldVariable_structure.JPG" width="486" /></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h5 class="title"><a id="field_variable_component" />Field Variable Component</h5></div></div></div><p /><p>Field Variable Component has the following attributes:</p><div class="itemizedlist"><ul type="disc"><li>Component number</li><li>Variable pointer</li><li>Field pointer</li><li>Interpolation type</li><li>Mesh component number</li><li>Scaling index</li><li>Domain pointer</li><li>Max number of interpolation parameters</li><li>Mappings(Field paramters-&gt;DOF)</li></ul></div></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h4 class="title"><a id="parameter_set" />Parameter set</h4></div></div></div><p>Parameter set stores values for each field variable component.</p><div class="mediaobject"><img src="../images/field_parameter_set_definition.JPG" width="486" /></div><p>Parameter set has the following Attributes:</p><div class="itemizedlist"><ul type="disc"><li>Set index</li><li>Set type</li><li>Parameters pointer</li></ul></div></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h3 class="title"><a id="equation_set" />Equations Sets</h3></div></div></div><p>
        Equations sets are aimed to have multiple classes,
        e.g. Elasticity, Fluid mechanics, Electromagnetics, General field problems, Fitting, Optimisation.
        Different equations are within each class, e.g. Bidomain, Navier-stokes etc.
        Each equation can use different solution techniques, e.g. FEM, BEM, FD, GFEM.
        The equation set is associated with a region and is built using the fields defined on the region.
      </p><p>
        The numerical methods are used which will result in a discretised matrix-vector form of the governing equations.
        openCMISS is designed to generate equations sets with a number of "equations" matrices.
      </p><p>e.g, damped mass spring system</p><mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
        <mml:mrow>
          <mml:mi>Mü</mml:mi>
          <mml:mo>+</mml:mo>
          <mml:mi>Cù</mml:mi>
          <mml:mo>+</mml:mo>
          <mml:mi>Ku</mml:mi>
          <mml:mo>=</mml:mo>
          <mml:mi>f</mml:mi>
        </mml:mrow>
      </mml:math><p>will be represented as:</p><div class="mediaobject"><img src="../images/fieldEquationsets-matrix.JPG" width="486" /></div><p>Equations Set has the following attributes:</p><div class="itemizedlist"><ul type="disc"><li>User number</li><li>Global number</li><li>Finished tag</li><li>Region pointer</li><li>Class identifier</li><li>Type identifier</li><li>Sub type identifier</li><li>Linearity type(?)</li><li>Time dependence type(?)</li><li>Solution method</li><li>Geometry (fibre?) field pointer</li><li>Materials field pointer</li><li>Source field pointer</li><li>Dependent field pointer</li><li>Analytic info pointer(Analytic info stored in dependent field currently)</li><li>Fixed conditions</li><li>Equations pointer</li></ul></div><div class="mediaobject"><img src="../images/fieldEquationsets-structure.JPG" width="486" /></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h4 class="title"><a id="equations" />Equations</h4></div></div></div><p>Equation holds the matrices and mapping information.</p><p>
          The Field variable to matrix mappings maps each field variable onto the equations matrices or RHS vector. 
        </p><p>e.g. Laplace(FEM): 2 variables, 1 component</p><div class="mediaobject"><img src="../images/fieldEquationsetsEquations-mappingFEM.JPG" width="486" /></div><p>e.g. Laplace(BEM): 2 variables, 1 component</p><div class="mediaobject"><img src="../images/fieldEquationsetsEquations-mappingBEM.JPG" width="486" /></div><p>e.g. Heat equation(explicit time/FEM space): 2 variables, 1 component</p><div class="mediaobject"><img src="../images/fieldEquationsetsEquations-mappingHeat.JPG" width="486" /></div><p>TODO matrix distribution</p><p>Equations has the following attributes:</p><div class="itemizedlist"><ul type="disc"><li>Equation set pointer</li><li>Finished tag</li><li>Output type</li><li>Sparsity type</li><li>Interpolation pointer</li><li>Linear equation data pointer</li><li>Nonlinear equation data pointer</li><li>Time(non-static) data pointer</li><li>Equations mapping pointer</li><li>Equations Matrices</li></ul></div><div class="mediaobject"><img src="../images/fieldEquationsetsEquations-structure.JPG" width="486" /></div></div></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h2 class="title" style="clear: both"><a id="problem" />Problems</h2></div></div></div><p>
      A problem has a number of solutions (each with their solver) inside a problem control loop. 
      Problem associated with region via solution which maps to equations sets and hence links to region. 
      Multiple problems can be in the same region, or multiple regions can woek to solve one problem. 
    </p><p>Problem has the following attributes:</p><div class="itemizedlist"><ul type="disc"><li>User number</li><li>Global number</li><li>Finished tag</li><li>Class</li><li>Type</li><li>Subtype</li><li>Control pointer</li><li>Number of solutions</li><li>Soultions pointer</li></ul></div><div class="mediaobject"><img src="../images/problem_structure.JPG" width="486" /></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h3 class="title"><a id="N1033B" />Solutions</h3></div></div></div><p>Solution has the following attributes:</p><div class="itemizedlist"><ul type="disc"><li>Solution number</li><li>Finished tag</li><li>Linear solution data pointer</li><li>Nonlinear solution data pointer</li><li>Time (non-static) solution data pointer</li><li>Equations set to add (the next equations set to add)</li><li>Index of added equations set(the last successfully added equations set)</li><li>Soultion mapping(which contains equations sets)</li><li>Solver pointer</li></ul></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h4 class="title"><a id="N10353" />Solvers</h4></div></div></div><p>Solver has the following attributes:</p><div class="itemizedlist"><ul type="disc"><li>Solution pointer</li><li>Finished tag</li><li>Solve type</li><li>Output type</li><li>Sparsity type</li><li>Linear solver pointer</li><li>Non-linear solver pointer</li><li>Time integrationn solver pointer</li><li>Eigenproblem solver pointer</li><li>Solver matrices</li></ul></div><div class="mediaobject"><img src="../images/problemSolutionSolver_structure.JPG" width="486" /></div></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h3 class="title"><a id="control" />Control</h3></div></div></div><p>Control has the following attributes:</p><div class="itemizedlist"><ul type="disc"><li>Problem pointer</li><li>Finished tag</li><li>Control type</li></ul></div></div></div></div><div class="chapter" lang="en"><div class="titlepage"><div><div><h2 class="title"><a id="N10388" />Chapter 3. Obtaining the Code and Setting up the Development Environment</h2></div></div></div><div class="toc"><p><b>Table of Contents</b></p><dl><dt><span class="section"><a href="#N1038B">Obtaining the Code and Libraries</a></span></dt><dd><dl><dt><span class="section"><a href="#N1039A">Obtain the Code</a></span></dt><dt><span class="section"><a href="#N103AD">Obtain the Libraries</a></span></dt><dt><span class="section"><a href="#N103D3">Makefile Structure</a></span></dt></dl></dd><dt><span class="section"><a href="#N103D8">Programmer documentation</a></span></dt><dt><span class="section"><a href="#N103F9">Project Set up</a></span></dt><dd><dl><dt><span class="section"><a href="#N103FC">On AIX 5.3 (HPC)</a></span></dt><dt><span class="section"><a href="#N10438">On Ubuntu 8.04</a></span></dt><dt><span class="section"><a href="#N1047B">On Windows XP (Visual Studio 2005)</a></span></dt><dt><span class="section"><a href="#N104C3">On Windows Vista (Visual Studio 2008)</a></span></dt></dl></dd><dt><span class="section"><a href="#N104F4">Libraries Build (Optional)</a></span></dt><dd><dl><dt><span class="section"><a href="#N104F7">Compiling PETSc</a></span></dt></dl></dd></dl></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h2 class="title" style="clear: both"><a id="N1038B" />Obtaining the Code and Libraries</h2></div></div></div><p>
      To obtain the openCMISS source you need to check it out from the subversion repository. 
      There are two parts to openCMISS to obtain - openCMISS itself and the various libraries it needs.
    </p><p>In your root openCMISS directory, make the <code class="filename">opencmiss</code> and <code class="filename">opemcmissextras</code> directories.</p><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h3 class="title"><a id="N1039A" />Obtain the Code</h3></div></div></div><p>The openCMISS repository is at https://opencmiss.svn.sourceforge.net/svnroot/opencmiss/cm</p><p>To check out the main trunk of openCMISS issue the following command in the <code class="filename">opencmiss</code> directory:</p><code class="code">svn co https://opencmiss.svn.sourceforge.net/svnroot/opencmiss/cm/trunk cm</code><p>If you are not familar with subversion, have a look at <a href="http://svnbook.red-bean.com" target="_top">here</a>.</p></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h3 class="title"><a id="N103AD" />Obtain the Libraries</h3></div></div></div><p>The openCMISS libraries repository is at http://www.physiome.ox.ac.uk/svn/opencmissextras/cm</p><p>To check out the main trunk of the various libraries required with openCMISS issue the following command in the <code class="filename">opencmissextras</code> directory:</p><code class="code">svn co http://www.physiome.ox.ac.uk/svn/opencmissextras/cm/trunk/external/architecture cm/external/architecture</code><p>
      where architecture is the appropriate architecture for the machine. Possible architectures are:
      </p><div class="itemizedlist"><ul type="disc"><li>i386-win32</li><li>i386-win32-debug</li><li>i686-linux</li><li>i686-linux-debug</li><li>x86_64-linux</li><li>x86_64-linux-debug</li><li>rs6000-32-aix</li><li>rs6000-32-aix-debug</li></ul></div><p>
        Currently, the svn repository for openCMISS libraries is down. An alternative location for the libraries within the ABI is on hpc. Go to <code class="filename">\\bioengsmb\cmiss\opencmissextras\cm</code> and copy the necessary files. 
        The folder structure is the same as svn repository. 
      </p></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h3 class="title"><a id="N103D3" />Makefile Structure</h3></div></div></div><p>
        The top level makefile will eventually build a library. 
        In the examples directory there are separate compilable "applications" with individual makefiles. 
        However, the library stuff isn't there as we need to code the bindings.  
      </p></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h2 class="title" style="clear: both"><a id="N103D8" />Programmer documentation</h2></div></div></div><p>
      This programmer documentation is written using <a href="http://www.docbook.org/" target="_top">DocBook</a> with the source located in the <code class="filename">opencmiss/cm/doc/programmer_documentation/</code> folder. The source XML code can be transformed into either chunked or combined documents in PDF or HTML format. The <code class="filename">Makefile</code> can be used to perform the transformation using <code class="code">make single</code> or <code class="code">make chunk</code> in the above folder.
    </p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Note</h3><p>PDFs can be generated using <code class="code">make fo</code></p></div><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Note</h3><p>Doxygen can be included ...</p></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h2 class="title" style="clear: both"><a id="N103F9" />Project Set up</h2></div></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h3 class="title"><a id="N103FC" />On AIX 5.3 (HPC)</h3></div></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h4 class="title"><a id="N103FF" />Set environment</h4></div></div></div><p>Set environment variable to point to openCMISS</p><code class="code">setenv OPENCMISS_ROOT &lt;path to your opencmiss folder&gt;</code> or <code class="code">export OPENCMISS_ROOT=&lt;path to your opencmiss folder&gt;</code>.
        <p>Set environment variable to point to openCMISS-extras</p><code class="code">setenv OPENCMISSEXTRAS_ROOT &lt;path to your opencmissextras folder&gt;</code> or <code class="code">export OPENCMISSEXTRAS_ROOT=&lt;path to your opencmissextras folder&gt;</code></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h4 class="title"><a id="N10411" />Set MPI</h4></div></div></div><p>Create a file called <code class="filename">hostfile.list</code> in your home directory.</p><p>Inside the file, add several lines of “<span class="quote">hpc.bioeng.auckland.ac.nz</span>”</p><p>In <code class="filename">.rhost</code> file in the home direcotry, add “<span class="quote">hpc &lt;username&gt;</span>”</p></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h4 class="title"><a id="N10426" />Compile</h4></div></div></div><p>Change directory to opencmiss/cm</p><p>Change directory to examples/&lt;example%gt;</p><p>Use <code class="code">gmake</code>.</p><p>This should result in a binary that you can run in the <code class="filename">bin/rs6000-32-aix</code> folder.</p></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h3 class="title"><a id="N10438" />On Ubuntu 8.04</h3></div></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h4 class="title"><a id="N1043B" />Set environment</h4></div></div></div><p>Set environment variable to point to opencmiss</p><code class="code">setenv OPENCMISS_ROOT &lt;path to your opencmiss folder&gt;</code> or <code class="code">export OPENCMISS_ROOT=&lt;path to your opencmiss folder&gt;</code>.
        <p>Set environment variable to point to openCMISS-extras</p><code class="code">setenv OPENCMISSEXTRAS_ROOT &lt;path to your opencmissextras folder&gt;</code> or <code class="code">export OPENCMISSEXTRAS_ROOT=&lt;path to your opencmissextras folder&gt;</code><p>It is also helpful to add the following</p><code class="code">
          <p>setenv PATH ${OPENCMISSEXTRAS_ROOT}/cm/external/${archname}/bin:${PATH}</p>
          <p>setenv PATH ${OPENCMISS_ROOT}/cm/bin/${archname}:${PATH}</p>
        </code><p>where ${archname} is the appropriate architecture e.g., i686-linux, x86_64-linux.</p><p>If you are using totalview you will also need to add</p><code class="code">setenv LM_LICENSE_FILES &lt;path-to-the-flex-directory&gt;</code></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h4 class="title"><a id="N1045D" />Install Compilers</h4></div></div></div><p>Download Intel Fotran Compiler from <a href="http://www.intel.com/cd/software/products/asmo-na/eng/282048.htm" target="_top">here</a>.</p><p>Extract the file and follow the <code class="filename">install.htm</code> to install</p></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h4 class="title"><a id="N1046C" />Compile</h4></div></div></div><p>To build an example project:</p><code class="code">make</code><p>To run the example project:</p><code class="code">mpd &amp; mpirun -n 2 path/to/the/execution/file</code><p>To debug the project using TotalView:</p><code class="code">mpd &amp; mpirun -tv 2 path/to/the/execution/file</code></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h3 class="title"><a id="N1047B" />On Windows XP (Visual Studio 2005)</h3></div></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h4 class="title"><a id="N1047E" />Install Compilers</h4></div></div></div><p>Download Intel Fortran Compiler from <a href="http://www.intel.com/cd/software/products/asmo-na/eng/278834.htm" target="_top">here</a>.</p><p>Execute the exe file and follow the installation wizard.</p></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h4 class="title"><a id="N10489" />Install MPI</h4></div></div></div><p>Download MPICH2 from <a href="http://www.mcs.anl.gov/research/projects/mpich2/" target="_top">here.</a></p><p>You can either download the source archive and follow the <code class="filename">README.windows</code> file to install or download the installer to install.</p><p>Set bin folder to the path</p><p>To start the MPI, run <code class="code">smpd -start</code> in command window.</p><p>NOTE: as from MPICH2 version 1.0.7 the library names have changed. <code class="filename">libmpich2</code> has now become <code class="filename">libmpi</code>!</p></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h4 class="title"><a id="N104A8" />Compile and Debug</h4></div></div></div><p>Build the Fortran project under the debug mode and generate the <code class="filename">opencmisstest-debug.exe</code> file.</p><p>In the C Project (since the Fortran projects do not support MPI cluster debugger), configure the debugging properties according to <a href="http://download.microsoft.com/download/6/8/d/68d7d82b-e477-4699-b403-72be2e6218b1/CCS03DebugParallelAppsVS05.doc" target="_top">this</a>.</p><p>The MPIShim location is in the path similar to C:\Program Files\Microsoft Visual Studio 8\Common7\IDE\Remote Debugger\x86\mpishim.exe.</p><p>Debug the C project.</p></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h4 class="title"><a id="N104BB" />Run</h4></div></div></div><p>To run the project in the command window:</p><span><strong class="command">mpiexec -n 2 -localroot &lt;path to the execution file&gt;</strong></span></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h3 class="title"><a id="N104C3" />On Windows Vista (Visual Studio 2008)</h3></div></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h4 class="title"><a id="N104C6" />Install Compilers</h4></div></div></div><p>Download Intel Fortran Compiler from <a href="http://www.intel.com/cd/software/products/asmo-na/eng/278834.htm" target="_top">here</a>.</p><p>Execute the exe file and follow the installation wizard.</p></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h4 class="title"><a id="N104D1" />Install MPI</h4></div></div></div><p>Before you install MPICH2 under Vista you must turn off User Account Control</p><div class="orderedlist"><ol type="1"><li>Goto Start -&gt; Control Panel</li><li>Double-click on User Accounts</li><li>Click "Turn User Account Control on or off"</li><li>Untick "Use User Account Control (UAC) to help protect your computer" and click OK</li><li>Restart your computer.</li></ol></div><p>Download from <a href="http://www.mcs.anl.gov/research/projects/mpich2/" target="_top">here</a>. Choose the Win32 IA32 (binary) option.</p><p>Run the downloaded .msi file. Follow all instructions and install "For everybody".</p><p>Once you have installed MPICH2 you can turn User Account Control back on. Follow the instructions above and in 4. tick the "Use User Account Control ...".</p><p>NOTE: as from MPICH2 version 1.0.7 the library names have changed. libmpich2 has now become libmpi!</p></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h4 class="title"><a id="N104EF" />Compile</h4></div></div></div><p>For each example, go into the VisualopenCMISS_08 folder. Double click the VisualopenCMISS project solution file to lauch Visual Studio.</p></div></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h2 class="title" style="clear: both"><a id="N104F4" />Libraries Build (Optional)</h2></div></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h3 class="title"><a id="N104F7" />Compiling PETSc</h3></div></div></div><p>Note this is assuming you have the Intel Fortran compiler version 10.1.024. Adjust the version string as necessary.</p><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h4 class="title"><a id="N104FC" />Step1: Linux Environment installation and Compiler Environment Set up (For Windows only)</h4></div></div></div><p>Under windows system:</p><div class="itemizedlist"><ul type="disc"><li>Install Cygwin if you need to. Cywin can be found <a href="http://www.cygwin.com/" target="_top">here</a>. Make sure you include the make and python modules when you install.</li><li>Lauch a Command Prompt Window</li><li>Run the ifortvars.bat batch file to setup your Intel Fortran environment. e.g., "C:\Program Files\Intel\Compiler\Fortran\10.1.024\IA32\Bin\ifortvars.bat"</li><li>Run the Cygwin batch file to setup the unix environment e.g., "C:\Cygwin\Cygwin.bat"</li></ul></div><p>
           N.B: PetSc uses X, so make sure in linux environment, libX11-dev package is installed.
           Also make sure blas and lapack (-dev) packages are installed. 
        </p></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h4 class="title"><a id="N10510" />Step2: Compile PETSC</h4></div></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h5 class="title"><a id="N10513" />For Windows</h5></div></div></div><div class="itemizedlist"><ul type="disc"><li>Change to the opencmissextras PETSc directory e.g., if opencmissextras root is E:\opencmissextras and we are compiling PETSC version petsc-2.3.3-p15 then "cd /cygwin/e/opencmissextras/cm/external/packages/PETSc/petsc-2.3.3-p15"</li><li>If you have MPICH2 version 1.0.7 or greater edit the python/BuildSystem/config/packages/MPI.py file. Find the self.liblist_mpich line. After the line "['fmpich2.lib','mpich2.lib']," add the line "['fmpich2.lib','mpi.lib'],".</li><li><code class="code">PETSC_DIR=/cygdrive/e/opencmissextras/cm/external/packages/PETSc/petsc-2.3.3-p15; export PETSC_DIR</code></li><li><p>For a debug install issue the following commands</p><code class="code">
                <p>PETSC_ARCH=cygwin-c-debug; export PETSC_ARCH</p>
                <p>config/configure.py --prefix=/cygdrive/e/opencmissextras/cm/external/i386-win32-debug --with-shared=no --with-cc='win32fe cl' --with-fc='win32fe ifort' --with-cxx='win32fe cl' --download-f-blas-lapack=1 LIBS=-L'/cygdrive/c/Program\ Files/Intel/Compiler/Fortran/10.1.024/IA32/Lib' --with-debugging=yes</p>
                <p>PETSC_ARCH=cygwin-c-debug; export PETSC_ARCH</p>
              </code><p>For a non-debug install issue the following commands</p><code class="code">
                <p>PETSC_ARCH=cygwin-c-opt; export PETSC_ARCH</p>
                <p>config/configure.py --prefix=/cygdrive/e/opencmissextras/cm/external/i386-win32 --with-shared=no --with-cc='win32fe cl' --with-fc='win32fe ifort' --with-cxx='win32fe cl' --download-f-blas-lapack=1 LIBS=-L'/cygdrive/c/Program\ Files/Intel/Compiler/Fortran/10.1.024/IA32/Lib' --with-debugging=no</p>
                <p>PETSC_ARCH=cygwin-c-opt; export PETSC_ARCH</p>
              </code></li><li><code class="code">make -e all</code></li><li><code class="code">make -e install</code></li></ul></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h5 class="title"><a id="N1053F" />For AIX5.3</h5></div></div></div><div class="itemizedlist"><ul type="disc"><li>Change to the opencmissextras PETSc directory. e.g /people/tyu011/workspace/opencmissextras/cm/external/packages/PETSc/petsc-2.3.3-p15</li><li><code class="code">setenv PETSC_DIR /people/tyu011/workspace/opencmissextras/cm/external/packages/PETSc/petsc-2.3.3-p15</code></li><li>In <code class="filename">config</code> directory, copy the file <code class="filename">aix5.1.0.0.py</code> and rename it to <code class="filename">aix5.3.0.0.py</code></li><li><p>For a debug install issue the following commands</p><code class="code">
                <p>setenv PETSC_ARCH aix5.3.0.0</p>
                <p>config/aix5.3.0.0.py --prefix=/people/tyu011/workspace/opencmissextras/cm/external/rs6000-32-aix-debug --with-debugging=yes</p>
                <p>setenv PETSC_ARCH aix5.3.0.0</p>
              </code><p>For a non-debug install issue the following commands</p><code class="code">
                <p>setenv PETSC_ARCH aix5.3.0.0</p>
                <p>config/aix5.3.0.0.py --prefix=/people/tyu011/workspace/opencmissextras/cm/external/rs6000-32-aix --with-debugging=no</p>
                <p>setenv PETSC_ARCH aix5.3.0.0</p>
              </code></li><li><code class="code">make -e all</code></li><li><code class="code">make -e install</code></li></ul></div></div></div></div></div></div><div class="chapter" lang="en"><div class="titlepage"><div><div><h2 class="title"><a id="N10576" />Chapter 4. Project Tracker</h2></div></div></div><div class="toc"><p><b>Table of Contents</b></p><dl><dt><span class="sect1"><a href="#N1057F">Tips</a></span></dt></dl></div><p>
    The opencmiss project tracker is hosted by the <a href="https://tracker.physiomeproject.org/" target="_top">Physiome project's Tracker</a>
  </p><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="N1057F" />Tips</h2></div></div></div><div class="itemizedlist"><ul type="disc"><li>To view openCMISS tracker items, go to <a href="https://tracker.physiomeproject.org/buglist.cgi?query_format=advanced&amp;bug_status=NEW&amp;bug_status=ASSIGNED&amp;bug_status=REOPENED&amp;product=openCMISS-cm" target="_top">https://tracker.physiomeproject.org/buglist.cgi?query_format=advanced&amp;bug_status=NEW&amp;bug_status=ASSIGNED&amp;bug_status=REOPENED&amp;product=openCMISS-cm</a></li><li>To add a tracker item: <a href="https://tracker.physiomeproject.org/enter_bug.cgi?classification=openCMISS-cm" target="_top">https://tracker.physiomeproject.org/enter_bug.cgi?classification=openCMISS-cm</a></li><li>Set preferences in the tracker to shadow/watch the opencmiss@physiomeproject.org user.  It is a default CC on openCMISS items, and that way you can set your preferences as to which bugmail you get, and have all new openCMISS tracker items.</li><li>There is an RSS feed link for any search result, so if you do a search for openCMISS (Advanced search, then choose openCMISS from “Classification”), you can use the RSS feed, and CC yourself to tracker items of interest.</li></ul></div></div></div><div class="chapter" lang="en"><div class="titlepage"><div><div><h2 class="title"><a id="N1058F" />Chapter 5. Object Interface</h2></div></div></div><div class="toc"><p><b>Table of Contents</b></p><dl><dt><span class="section"><a href="#N10592">Objectives</a></span></dt><dt><span class="section"><a href="#N1059C">General Rules</a></span></dt><dt><span class="section"><a href="#N105C0">Example(Basis functions)</a></span></dt></dl></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h2 class="title" style="clear: both"><a id="N10592" />Objectives</h2></div></div></div><div class="itemizedlist"><ul type="disc"><li>Simple interface for a variety of scripting and programming languages</li><li>User friendly in that the library should sensibly set default parameters to minimise the amount of information the programmer/user has to send</li><li>Should be extensible so that extra parameters can be added at a later stage without causing problems</li></ul></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h2 class="title" style="clear: both"><a id="N1059C" />General Rules</h2></div></div></div><div class="itemizedlist"><ul type="disc"><li>Objects identified by a unique user number</li><li>Objects are initialised with a <code class="code">OBJECT_INITIALISE</code> call</li><li>Objects are finalised with a <code class="code">OBJECT_FINALISE</code> call</li><li>Objects are created with a pair of <code class="code">OBJECT_CREATE_START</code> and <code class="code">OBJECT_CREATE_FINISH</code> calls</li><li>Objects are destroyed with a <code class="code">OBJECT_DESTROY</code> call</li><li>Object parameters are set with a number of <code class="code">OBJECT_PARAMETER_SET</code> calls between the START and FINISH calls</li><li>START call initialises OBJECT and sets default parameters. SET calls modify default parameters. FINISH call finalises the object</li></ul></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h2 class="title" style="clear: both"><a id="N105C0" />Example(Basis functions)</h2></div></div></div><pre class="programlisting">!Initialise the basis functions.
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>BASES_INITIALISE</strong></span>(<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Start the creation of a basis with a user <span class="strong"><strong>number</strong></span> of 1. 
!The default is tri-linear Lagrange
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>BASIS_CREATE_START</strong></span>(1,BASIS,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Set the <span class="strong"><strong>number</strong></span> of xi directions <span class="strong"><strong>to</strong></span> 2.
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>BASIS_NUMBER_OF_XI_SET</strong></span>(BASIS,2,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Set the interpolation <span class="strong"><strong>to</strong></span> be cubic Hermite<span class="emphasis"><em>*quadratic Lagrange.</em></span>
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>BASIS_INTERPOLATION_XI_SET</strong></span>(BASIS, &amp;
&amp; (/CUBIC_HERMITE,QUADRATIC_LAGRANGE/),<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Finish the creation of the basis.
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>BASIS_CREATE_FINISH</strong></span>(BASIS,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Destroy the basis with the user <span class="strong"><strong>number</strong></span> 1.
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>BASIS_DESTROY</strong></span>(1,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Finalise the basis functions.
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>BASES_FINALISE</strong></span>(<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999) </em></span></pre></div></div><div class="chapter" lang="en"><div class="titlepage"><div><div><h2 class="title"><a id="N10645" />Chapter 6. Examples</h2></div></div></div><div class="toc"><p><b>Table of Contents</b></p><dl><dt><span class="section"><a href="#N10648">Laplace equation</a></span></dt></dl></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h2 class="title" style="clear: both"><a id="N10648" />Laplace equation</h2></div></div></div><pre class="programlisting">!Initialise CMISS.
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>CMISS_INITIALISE</strong></span>(<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>

!Start the creation a coordinate <span class="strong"><strong>system </strong></span>(default 3D RC)
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>COORDINATE_SYSTEM_CREATE_START</strong></span>(1,COORDINATE_SYSTEM,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Set the coordinate system <span class="strong"><strong>to</strong></span> be 2D
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>COORDINATE_SYSTEM_DIMENSION_SET</strong></span>(COORDINATE_SYSTEM,2,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Finish the creation a coordinate system
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>COORDINATE_SYSTEM_CREATE_FINISH</strong></span>(COORDINATE_SYSTEM,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>

!Start the creation of a region with a coordinate system.
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>REGION_CREATE_START</strong></span>(1,COORDINATE_SYSTEM,REGION,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Finish the creation of a region
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>REGION_CREATE_FINISH</strong></span>(REGION,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>

!Start the creation of a <span class="strong"><strong>basis </strong></span>(default tri-linear Lagrange)
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>BASIS_CREATE_START</strong></span>(1,BASIS,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Set the <span class="strong"><strong>number</strong></span> of Xi directions <span class="strong"><strong>to</strong></span> 2 (bi-linear Lagrange)
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>BASIS_NUMBER_XI_SET</strong></span>(BASIS,2,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Finish the creation of a basis
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>BASIS_CREATE_FINISH</strong></span>(BASIS,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>

  
  
!Start the creation of a generated mesh in the region
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>GENERATED_MESH_CREATE_START</strong></span>(1,REGION,GENERATED_MESH,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Set up a regular 100x100 mesh
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>GENERATED_MESH_TYPE_SET</strong></span>(GENERATED_MESH,GENERATED_MESH_REGULAR_TYPE, &amp;
    &amp; <span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>GENERATED_MESH_BASIS_SET</strong></span>(GENERATED_MESH,BASIS,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>GENERATED_MESH_EXTENT_SET</strong></span>(GENERATED_MESH,(/2.0_DP,1.0_DP/),<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>GENERATED_MESH_NUMBER_OF_ELEMENTS_SET</strong></span>(GENERATED_MESH,(/100,100/), &amp;
    &amp; <span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Finish the creation of a generated mesh in the region
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>GENERATED_MESH_CREATE_FINISH</strong></span>(GENERATED_MESH,MESH,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>

!Start the creation a decomposition on a mesh
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>DECOMPOSITION_CREATE_START</strong></span>(1,MESH,DECOMPOSITION,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Set the decomposition so that the domains are calculated
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>DECOMPOSITION_TYPE_SET</strong></span>(DECOMPOSITION,DECOMPOSITION_CALCULATED_TYPE, &amp;
    &amp; <span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>DECOMPOSITION_NUMBER_OF_DOMAINS_SET</strong></span>(DECOMPOSITION,5,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Finish the creation of decomposition
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>DECOMPOSITION_CREATE_FINISH</strong></span>(DECOMPOSITION,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>

  

!Start the creation of a field on a <span class="strong"><strong>region </strong></span>(default geometric)
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>FIELD_CREATE_START</strong></span>(1,REGION,GEOMETRIC_FIELD,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Set the decomposition the field will use
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>FIELD_MESH_DECOMPOSITION_SET</strong></span>(GEOMETRIC_FIELD,DECOMPOSITION,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Set mesh components each of the field variable components will use. NB. These
!are shown for example as each field variable component will default <span class="strong"><strong>to</strong></span> the
!first mesh component.
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>FIELD_COMPONENT_MESH_COMPONENT_SET</strong></span>(GEOMETRIC_FIELD, &amp;
    &amp; FIELD_STANDARD_VARIABLE_TYPE,1,1,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>FIELD_COMPONENT_MESH_COMPONENT_SET</strong></span>(GEOMETRIC_FIELD, &amp;
    &amp; FIELD_STANDARD_VARIABLE_TYPE,2,1,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Finish the creation of a field
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>FIELD_CREATE_FINISH</strong></span>(GEOMETRIC_FIELD,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>

!Set a field value in a <span class="strong"><strong>parameter</strong></span> set
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>FIELD_PARAMETER_SET_UPDATE_NODE</strong></span>(GEOMETRIC_FIELD, &amp;
    &amp; FIELD_VALUES_SET_TYPE,1,1,1,FIELD_STANDARD_VARIABLE_TYPE, &amp;
    &amp; 1.0_DP,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Start the update of field values in a <span class="strong"><strong>parameter</strong></span> set
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>FIELD_PARAMETER_SET_UPDATE_START</strong></span>(GEOMETRIC_FIELD, &amp;
    &amp; FIELD_VALUES_SET_TYPE,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!!<span class="strong"><strong>DO</strong></span> SOME CALCULATIONS
!Finish the update of field values in a <span class="strong"><strong>parameter</strong></span> set
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>FIELD_PARAMETER_SET_UPDATE_FINISH</strong></span>(GEOMETRIC_FIELD, &amp;
    &amp; FIELD_VALUES_SET_TYPE,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
  
    
  
!Start the creation of an equations set on a region
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>EQUATIONS_SET_CREATE_START</strong></span>(1,REGION,GEOMETRIC_FIELD,EQUATIONS_SET, &amp;
    &amp; <span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Set the equations set <span class="strong"><strong>to</strong></span> be standard Laplace�s equation problem
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>EQUATIONS_SET_SPECIFICATION_SET</strong></span>(EQUATIONS_SET, &amp;
    &amp; EQUATIONS_SET_CLASSICAL_FIELD_CLASS,EQUATIONS_SET_LAPLACE_EQUATION_TYPE, &amp;
    &amp; EQUATIONS_SET_STANDARD_LAPLACE_SUBTYPE,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Finish the creation of an equations set
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>EQUATIONS_SET_CREATE_FINISH</strong></span>(EQUATIONS_SET,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>

!Start the creation of the equations set dependent field
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>EQUATIONS_SET_DEPENDENT_CREATE_START</strong></span>(EQUATIONS_SET,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Finish the create of the problems dependent field
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>EQUATIONS_SET_DEPENDENT_CREATE_FINISH</strong></span>(EQUATIONS_SET,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>

!Start the creation of the equations set fixed conditions
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>EQUATIONS_SET_FIXED_CONDITIONS_CREATE_START</strong></span>(EQUATIONS_SET,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Set BC�s
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>EQUATIONS_SET_FIXED_CONDITIONS_SET_DOF</strong></span>(EQUATIONS_SET,1, &amp;
    &amp; EQUATIONS_SET_FIXED_BOUNDARY_CONDITION,0.0_DP,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>EQUATIONS_SET_FIXED_CONDITIONS_SET_DOF</strong></span>(PROBLEM,10, &amp;
    &amp; EQUATIONS_SET_FIXED_BOUNDARY_CONDITION,1.0_DP,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Finish the create of the equations set fixed conditions
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>EQUATIONS_SET_FIXED_CONDITIONS_CREATE_FINISH</strong></span>(EQUATIONS_SET,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
 
  
  
 !Start the creation of the equations for the equations set
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>EQUATIONS_SET_EQUATIONS_CREATE_START</strong></span>(EQUATIONS_SET,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Set the equations matrices sparsity <span class="strong"><strong>type</strong></span>
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>EQUATIONS_SET_SPARSITY_TYPE_SET</strong></span>(EQUATIONS_SET,EQUATIONS_SET_SPARSE_MATRICES, &amp; 
    &amp; <span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Set the equations output <span class="strong"><strong>type</strong></span>
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>EQUATIONS_SET_OUTPUT_TYPE_SET</strong></span>(EQUATIONS_SET,EQUATIONS_SET_TIMING_OUTPUT, &amp;
    &amp; <span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Finish the creation of the equations for the equations set
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>EQUATIONS_SET_EQUATIONS_CREATE_FINISH</strong></span>(EQUATIONS_SET,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>

!Start the creation of a problem
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>PROBLEM_CREATE_START</strong></span>(1,PROBLEM,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Set the problem set <span class="strong"><strong>to</strong></span> be standard Laplace�s equation problem
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>PROBLEM_SPECIFICATION_SET</strong></span>(PROBLEM,PROBLEM_CLASSICAL_FIELD_CLASS, &amp;
    &amp; PROBLEM_LAPLACE_EQUATION_TYPE,PROBLEM_STANDARD_LAPLACE_SUBTYPE,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Finish the creation of a problem
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>PROBLEM_CREATE_FINISH</strong></span>(PROBLEM,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>

!Start the creation of the control for a problem
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>PROBLEM_CONTROL_CREATE_START</strong></span>(PROBLEM,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Finish the creation of the control a problem
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>PROBLEM_CONTROL_CREAT_CREATE_FINISH</strong></span>(PROBLEM,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
 
  
 
 !Start the creation of the solutions for the problem
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>PROBLEM_SOLUTIONS_CREATE_START</strong></span>(PROBLEM,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Add in the equations set
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>PROBLEM_SOLUTIONS_EQUATIONS_SET_ADD</strong></span>(PROBLEM,1,EQUATIONS_SET,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Set the solutions output <span class="strong"><strong>type</strong></span>
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>PROBLEM_SOLUTIONS_OUTPUT_TYPE_SET</strong></span>(PROBLEM,1,PROBLEM_SOLUTION_MATRIX_OUTPUT, &amp;
    &amp; <span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Finish the creation of the solutions for the problem
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>PROBLEM_SOLUTIONS_CREATE_FINISH</strong></span>(PROBLEM,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>

!Start the creation of the solvers for the problem
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>PROBLEM_SOLVER_CREATE_START</strong></span>(PROBLEM,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Set the <span class="strong"><strong>type</strong></span> of preconditioner
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>PROBLEM_SOLVER_ITERATIVE_PRECONDITIONER_TYPE_SET</strong></span>(PROBLEM,1, &amp;
    &amp; PROBLEM_SOLVER_ITERATIVE_INCOMPLETE_LU_PRECONDITIONER,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Set the <span class="strong"><strong>number</strong></span> of iterations
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>PROBLEM_SOLVER_ITERATIVE_MAX_ITERATIONS_SET</strong></span>(PROBLEM,1,100,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Set the output <span class="strong"><strong>type</strong></span>
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>PROBLEM_SOlVER_OUTPUT_TYPE_SET</strong></span>(PROBLEM,1,PROBLEM_SOLVER_TIMING_OUTPUT, &amp;
    &amp; <span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Finish the creation of the solvers for the problem
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>PROBLEM_SOLVER_CREATE_FINISH</strong></span>(PROBLEM,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>

!Solve the problem
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>PROBLEM_SOLVE</strong></span>(PROBLEM,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>

!Finalise CMISS.
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>CMISS_FINALISE</strong></span>(<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
</pre></div></div><div class="chapter" lang="en"><div class="titlepage"><div><div><h2 class="title"><a id="N109E3" />Chapter 7. Library Commands</h2></div></div></div><div class="toc"><p><b>Table of Contents</b></p><dl><dt><span class="section"><a href="#N109E7">Top level</a></span></dt><dd><dl><dt><span class="section"><a href="#N109EA">cmiss</a></span></dt></dl></dd><dt><span class="section"><a href="#N109ED">Basis functions</a></span></dt><dt><span class="section"><a href="#N109F0">Coordinate Systems</a></span></dt><dt><span class="section"><a href="#N109F3">Regions</a></span></dt><dd><dl><dt><span class="section"><a href="#N109F6">Node</a></span></dt><dt><span class="section"><a href="#N109F9">Mesh</a></span></dt><dt><span class="section"><a href="#N109FC">Field</a></span></dt><dt><span class="section"><a href="#N109FF">Equations Set</a></span></dt></dl></dd><dt><span class="section"><a href="#N10A02">Problems</a></span></dt><dd><dl><dt><span class="section"><a href="#N10A05">Solver</a></span></dt></dl></dd></dl></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h2 class="title" style="clear: both"><a id="N109E7" />Top level</h2></div></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h3 class="title"><a id="N109EA" />cmiss</h3></div></div></div></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h2 class="title" style="clear: both"><a id="N109ED" />Basis functions</h2></div></div></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h2 class="title" style="clear: both"><a id="N109F0" />Coordinate Systems</h2></div></div></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h2 class="title" style="clear: both"><a id="N109F3" />Regions</h2></div></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h3 class="title"><a id="N109F6" />Node</h3></div></div></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h3 class="title"><a id="N109F9" />Mesh</h3></div></div></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h3 class="title"><a id="N109FC" />Field</h3></div></div></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h3 class="title"><a id="N109FF" />Equations Set</h3></div></div></div></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h2 class="title" style="clear: both"><a id="N10A02" />Problems</h2></div></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h3 class="title"><a id="N10A05" />Solver</h3></div></div></div></div></div></div><div class="chapter" lang="en"><div class="titlepage"><div><div><h2 class="title"><a id="N10A08" />Chapter 8. Coding Style</h2></div></div></div>
  This is an attempt to document the programming "style" for use with openCMISS.
  <div class="itemizedlist"><ul type="disc"><li>Within a module all named constants and procedure names should be prefixed by a name indicating that module so as to maintain a namespace.</li><li>All dynamic arrays should be <code class="code">ALLOCATABLE</code> rather than <code class="code">POINTER</code> unless full pointer functionality is required.</li><li>A double space should be used for an indent. Tabs should not be used to indent code.</li><li>All pointers should be checked to see if they are <code class="code">ASSOCIATED</code> before de-referencing them.</li><li>If there is just a single statement following an <code class="code">IF</code> clause use the inline form of the <code class="code">IF</code> statement and do not use <code class="code">THEN</code> and <code class="code">ENDIF</code>.</li><li>There should be a space before the first continuation character and a space after the second continuation character when continuing lines.</li><li>Use standard loop variable names e.g., <code class="code">nn</code>, <code class="code">component_idx</code>, when looping rather than temporary variable names.</li><li>When using case statements put in all known values of the the case variable and use a <code class="code">CALL FLAG_ERROR("Not implemented", ...</code> statement if the code for the case variable has yet to be coded.</li><li>Use a <code class="code">!================</code>... line between subroutines and functions</li><li>For dummy array arguments the dimension qualifier should be with the array name i.e., use <code class="code">INTEGER(INTG) :: FRED(N)</code> rather than <code class="code">INTEGER(INTG), DIMENSION(N) :: FRED</code>.</li><li>Code should be no more than 132 characters in a line. Use continuation &amp;'s if need be. Add the space before/after each &amp; to distinguish with the complete line.</li><li>
      No need to allocate local arrays if the size of array is known. 
      e.g. <code class="code">REAL(DP), ALLOCATABLE :: VALUE_BUFFER(:)</code> and then <code class="code">ALLOCATE(VALUE_BUFFER(5),STAT=ERR)</code>
      can be replaced with <code class="code">REAL(DP)::VALUE_BUFFER(5)</code></li><li>Use node hierarchy consistently in subroutine calls. i.e., derivative_number,node_number,component_number,variable_number instead of reverse order.</li><li>Input arguments should be checked in a subroutine before being used.</li><li>No space between IF and condition i.e. IF( rather than IF (.</li><li>Use Fortran 2003 standard for get the arguments to a program than the non-standard GET_ARG</li><li>Get routines
      <div class="itemizedlist"><ul type="circle"><li>Use subroutines instead of function.</li><li>Return the result to the memory supplied by calling program. (i.e. using <code class="code">INTENT(OUT)::A(:)</code> etc)</li><li>Indicate in the doxygen comment that an argument is changed inside the get routine.</li><li>Check that the size of the memory passed in is large enough to hold the data that it is going to store</li></ul></div></li></ul></div><p>The following styles are required by IBM Fortran Compiler:</p><div class="itemizedlist"><ul type="disc"><li>
      For <code class="code">read/write/print</code> statement, avoid the comma before the data variable. 
      For example, use <code class="code">READ(FILE_ID, CHAR(DP_FMT), IOSTAT=IOS) REAL_DATA(1:LEN_OF_DATA)</code> instead of <code class="code">READ(FILE_ID, CHAR(DP_FMT), IOSTAT=IOS), REAL_DATA(1:LEN_OF_DATA)</code></li><li>
      In <code class="code">IF/WHILE</code> statement, if it checks whether a logical value is true or false, 
      use <code class="code">IF(SOMEVALUE)</code> or <code class="code">IF(.NOT.SOMEVALUE)</code> instead of <code class="code">IF(SOMEVALUE==.TRUE.)</code> or <code class="code">IF(SOMEVALUE==.FALSE.)</code></li><li>
      For the complete array assignment, use <code class="code">A=B</code> instead of <code class="code">A(:)=B(:)</code></li></ul></div></div></div></body></html>