/*!
\page examples Examples
\section laplace_equation Laplace equation
\code
!Initialise CMISS.
CALL CMISS_INITIALISE(ERR,ERROR,*999)

!Start the creation a coordinate system (default 3D RC)
CALL COORDINATE_SYSTEM_CREATE_START(1,COORDINATE_SYSTEM,ERR,ERROR,*999)
!Set the coordinate system to be 2D
CALL COORDINATE_SYSTEM_DIMENSION_SET(COORDINATE_SYSTEM,2,ERR,ERROR,*999)
!Finish the creation a coordinate system
CALL COORDINATE_SYSTEM_CREATE_FINISH(COORDINATE_SYSTEM,ERR,ERROR,*999)

!Start the creation of a region with a coordinate system.
CALL REGION_CREATE_START(1,COORDINATE_SYSTEM,REGION,ERR,ERROR,*999)
!Finish the creation of a region
CALL REGION_CREATE_FINISH(REGION,ERR,ERROR,*999)

!Start the creation of a basis (default tri-linear Lagrange)
CALL BASIS_CREATE_START(1,BASIS,ERR,ERROR,*999)
!Set the number of Xi directions to 2 (bi-linear Lagrange)
CALL BASIS_NUMBER_XI_SET(BASIS,2,ERR,ERROR,*999)
!Finish the creation of a basis
CALL BASIS_CREATE_FINISH(BASIS,ERR,ERROR,*999)
  
!Start the creation of a generated mesh in the region
CALL GENERATED_MESH_CREATE_START(1,REGION,GENERATED_MESH,ERR,ERROR,*999)
!Set up a regular 100x100 mesh
CALL GENERATED_MESH_TYPE_SET(GENERATED_MESH,GENERATED_MESH_REGULAR_TYPE, &
    & ERR,ERROR,*999)
CALL GENERATED_MESH_BASIS_SET(GENERATED_MESH,BASIS,ERR,ERROR,*999)
CALL GENERATED_MESH_EXTENT_SET(GENERATED_MESH,(/2.0_DP,1.0_DP/),ERR,ERROR,*999)
CALL GENERATED_MESH_NUMBER_OF_ELEMENTS_SET(GENERATED_MESH,(/100,100/), &
    & ERR,ERROR,*999)
!Finish the creation of a generated mesh in the region
CALL GENERATED_MESH_CREATE_FINISH(GENERATED_MESH,MESH,ERR,ERROR,*999)

!Start the creation a decomposition on a mesh
CALL DECOMPOSITION_CREATE_START(1,MESH,DECOMPOSITION,ERR,ERROR,*999)
!Set the decomposition so that the domains are calculated
CALL DECOMPOSITION_TYPE_SET(DECOMPOSITION,DECOMPOSITION_CALCULATED_TYPE, &
    & ERR,ERROR,*999)
CALL DECOMPOSITION_NUMBER_OF_DOMAINS_SET(DECOMPOSITION,5,ERR,ERROR,*999)
!Finish the creation of decomposition
CALL DECOMPOSITION_CREATE_FINISH(DECOMPOSITION,ERR,ERROR,*999)

!Start the creation of a field on a region (default geometric)
CALL FIELD_CREATE_START(1,REGION,GEOMETRIC_FIELD,ERR,ERROR,*999)
!Set the decomposition the field will use
CALL FIELD_MESH_DECOMPOSITION_SET(GEOMETRIC_FIELD,DECOMPOSITION,ERR,ERROR,*999)
!Set mesh components each of the field variable components will use. NB. These
!are shown for example as each field variable component will default to the
!first mesh component.
CALL FIELD_COMPONENT_MESH_COMPONENT_SET(GEOMETRIC_FIELD, &
    & FIELD_STANDARD_VARIABLE_TYPE,1,1,ERR,ERROR,*999)
CALL FIELD_COMPONENT_MESH_COMPONENT_SET(GEOMETRIC_FIELD, &
    & FIELD_STANDARD_VARIABLE_TYPE,2,1,ERR,ERROR,*999)
!Finish the creation of a field
CALL FIELD_CREATE_FINISH(GEOMETRIC_FIELD,ERR,ERROR,*999)

!Set a field value in a parameter set
CALL FIELD_PARAMETER_SET_UPDATE_NODE(GEOMETRIC_FIELD, &
    & FIELD_VALUES_SET_TYPE,1,1,1,FIELD_STANDARD_VARIABLE_TYPE, &
    & 1.0_DP,ERR,ERROR,*999)
!Start the update of field values in a parameter set
CALL FIELD_PARAMETER_SET_UPDATE_START(GEOMETRIC_FIELD, &
    & FIELD_VALUES_SET_TYPE,ERR,ERROR,*999)
!!DO SOME CALCULATIONS
!Finish the update of field values in a parameter set
CALL FIELD_PARAMETER_SET_UPDATE_FINISH(GEOMETRIC_FIELD, &
    & FIELD_VALUES_SET_TYPE,ERR,ERROR,*999)
    
!Start the creation of an equations set on a region
CALL EQUATIONS_SET_CREATE_START(1,REGION,GEOMETRIC_FIELD,EQUATIONS_SET, &
    & ERR,ERROR,*999)
!Set the equations set to be standard Laplace's equation problem
CALL EQUATIONS_SET_SPECIFICATION_SET(EQUATIONS_SET, &
    & EQUATIONS_SET_CLASSICAL_FIELD_CLASS,EQUATIONS_SET_LAPLACE_EQUATION_TYPE, &
    & EQUATIONS_SET_STANDARD_LAPLACE_SUBTYPE,ERR,ERROR,*999)
!Finish the creation of an equations set
CALL EQUATIONS_SET_CREATE_FINISH(EQUATIONS_SET,ERR,ERROR,*999)

!Start the creation of the equations set dependent field
CALL EQUATIONS_SET_DEPENDENT_CREATE_START(EQUATIONS_SET,ERR,ERROR,*999)
!Finish the create of the problems dependent field
CALL EQUATIONS_SET_DEPENDENT_CREATE_FINISH(EQUATIONS_SET,ERR,ERROR,*999)

!Start the creation of the equations set fixed conditions
CALL EQUATIONS_SET_FIXED_CONDITIONS_CREATE_START(EQUATIONS_SET,ERR,ERROR,*999)
!Set BC's
CALL EQUATIONS_SET_FIXED_CONDITIONS_SET_DOF(EQUATIONS_SET,1, &
    & EQUATIONS_SET_FIXED_BOUNDARY_CONDITION,0.0_DP,ERR,ERROR,*999)
CALL EQUATIONS_SET_FIXED_CONDITIONS_SET_DOF(PROBLEM,10, &
    & EQUATIONS_SET_FIXED_BOUNDARY_CONDITION,1.0_DP,ERR,ERROR,*999)
!Finish the create of the equations set fixed conditions
CALL EQUATIONS_SET_FIXED_CONDITIONS_CREATE_FINISH(EQUATIONS_SET,ERR,ERROR,*999)
  
 !Start the creation of the equations for the equations set
CALL EQUATIONS_SET_EQUATIONS_CREATE_START(EQUATIONS_SET,ERR,ERROR,*999)
!Set the equations matrices sparsity type
CALL EQUATIONS_SET_SPARSITY_TYPE_SET(EQUATIONS_SET,EQUATIONS_SET_SPARSE_MATRICES, & 
    & ERR,ERROR,*999)
!Set the equations output type
CALL EQUATIONS_SET_OUTPUT_TYPE_SET(EQUATIONS_SET,EQUATIONS_SET_TIMING_OUTPUT, &
    & ERR,ERROR,*999)
!Finish the creation of the equations for the equations set
CALL EQUATIONS_SET_EQUATIONS_CREATE_FINISH(EQUATIONS_SET,ERR,ERROR,*999)

!Start the creation of a problem
CALL PROBLEM_CREATE_START(1,PROBLEM,ERR,ERROR,*999)
!Set the problem set to be standard Laplace's equation problem
CALL PROBLEM_SPECIFICATION_SET(PROBLEM,PROBLEM_CLASSICAL_FIELD_CLASS, &
    & PROBLEM_LAPLACE_EQUATION_TYPE,PROBLEM_STANDARD_LAPLACE_SUBTYPE,ERR,ERROR,*999)
!Finish the creation of a problem
CALL PROBLEM_CREATE_FINISH(PROBLEM,ERR,ERROR,*999)

!Start the creation of the control for a problem
CALL PROBLEM_CONTROL_CREATE_START(PROBLEM,ERR,ERROR,*999)
!Finish the creation of the control a problem
CALL PROBLEM_CONTROL_CREAT_CREATE_FINISH(PROBLEM,ERR,ERROR,*999)
 
 !Start the creation of the solutions for the problem
CALL PROBLEM_SOLUTIONS_CREATE_START(PROBLEM,ERR,ERROR,*999)
!Add in the equations set
CALL PROBLEM_SOLUTIONS_EQUATIONS_SET_ADD(PROBLEM,1,EQUATIONS_SET,ERR,ERROR,*999)
!Set the solutions output type
CALL PROBLEM_SOLUTIONS_OUTPUT_TYPE_SET(PROBLEM,1,PROBLEM_SOLUTION_MATRIX_OUTPUT, &
    & ERR,ERROR,*999)
!Finish the creation of the solutions for the problem
CALL PROBLEM_SOLUTIONS_CREATE_FINISH(PROBLEM,ERR,ERROR,*999)

!Start the creation of the solvers for the problem
CALL PROBLEM_SOLVER_CREATE_START(PROBLEM,ERR,ERROR,*999)
!Set the type of preconditioner
CALL PROBLEM_SOLVER_ITERATIVE_PRECONDITIONER_TYPE_SET(PROBLEM,1, &
    & PROBLEM_SOLVER_ITERATIVE_INCOMPLETE_LU_PRECONDITIONER,ERR,ERROR,*999)
!Set the number of iterations
CALL PROBLEM_SOLVER_ITERATIVE_MAX_ITERATIONS_SET(PROBLEM,1,100,ERR,ERROR,*999)
!Set the output type
CALL PROBLEM_SOlVER_OUTPUT_TYPE_SET(PROBLEM,1,PROBLEM_SOLVER_TIMING_OUTPUT, &
    & ERR,ERROR,*999)
!Finish the creation of the solvers for the problem
CALL PROBLEM_SOLVER_CREATE_FINISH(PROBLEM,ERR,ERROR,*999)

!Solve the problem
CALL PROBLEM_SOLVE(PROBLEM,ERR,ERROR,*999)

!Finalise CMISS.
CALL CMISS_FINALISE(ERR,ERROR,*999)

\endcode
*/