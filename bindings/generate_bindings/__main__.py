"""
OpenCMISS Interface Generation
==============================

This python script parses opencmiss.f90 and generates
code for the bindings to other languages.

C
-

Integer constants are included in opencmiss.h

C functions are written to opencmiss_c.f90 from subroutines in opencmiss.f90 and function
declarations are written to opencmiss.h.

For interfaces where one routine takes parameters as scalars and another takes them as arrays,
only the routine that takes arrays is included. This is done by checking the routine names for
"Number0", "Number1", "Number01" etc. so relies on this naming convention to work correctly.

Python
------

Generates a list of types and a dictionary of docstrings used by the Python interface,
which is generated by SWIG.

Limitations
-----------

- Doesn't support multi-dimensional arrays of CMISS types or Logicals, but this can be added
  if required.

- Doesn't account for the difference in storage order of multi-dimensional arrays between C
  and Fortran, except in CMISSC2FStrings.

"""

import os,sys

if len(sys.argv) >= 3:
    (cm_path,language) = sys.argv[1:3]
    extra_args = sys.argv[3:]
else:
    sys.stderr.write('Usage: %s cm_path language language_specific_arguments\n' % sys.argv[0])
    exit(1)

from c import generate as c_generate
from python import generate as python_generate

languages = {'C':c_generate, 'Python':python_generate}
if language not in languages.keys():
    sys.stderr.write('Language must be one of:\n')
    for l in languages:
        sys.stderr.write('  %s\n' % l)
    exit(1)

languages[language](cm_path,extra_args)

