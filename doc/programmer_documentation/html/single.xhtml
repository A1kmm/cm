<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><title>OpenCMISS Programmer Documentation</title><meta content="DocBook XSL Stylesheets V1.68.1" name="generator" /></head><body><div class="book" lang="en"><div class="titlepage"><div><div><h1 class="title"><a id="N10001" />OpenCMISS Programmer Documentation</h1></div></div><hr /></div><div class="toc"><p><b>Table of Contents</b></p><dl><dt><span class="chapter"><a href="#N10005">1. Introduction</a></span></dt><dd><dl><dt><span class="sect1"><a href="#N1000A">CMISS</a></span></dt><dt><span class="sect1"><a href="#N10011">Shared Memory Computing vs Distributed Memory Computing</a></span></dt><dt><span class="sect1"><a href="#N10018">Objectives of OpenCMISS</a></span></dt></dl></dd><dt><span class="chapter"><a href="#N1001D">2. OpenCMISS Concepts</a></span></dt><dd><dl><dt><span class="section"><a href="#basis">Basis Functions</a></span></dt><dt><span class="section"><a href="#coordinate system">Coordinate Systems</a></span></dt><dt><span class="section"><a href="#regions">Regions</a></span></dt><dd><dl><dt><span class="section"><a href="#nodes">Nodes</a></span></dt><dt><span class="section"><a href="#mesh">Meshes</a></span></dt><dt><span class="section"><a href="#field">Fields</a></span></dt><dt><span class="section"><a href="#equation_set">Equations Sets</a></span></dt></dl></dd><dt><span class="section"><a href="#problem">Problems</a></span></dt><dd><dl><dt><span class="section"><a href="#N1033B">Solutions</a></span></dt><dt><span class="section"><a href="#control">Control</a></span></dt></dl></dd></dl></dd><dt><span class="chapter"><a href="#N10387">3. Obtaining the Code and Setting up the Development Environment</a></span></dt><dd><dl><dt><span class="section"><a href="#N1038A">Obtaining the Code and Libraries</a></span></dt><dd><dl><dt><span class="section"><a href="#N10399">Obtain the Code</a></span></dt><dt><span class="section"><a href="#N103AC">Obtain the Libraries</a></span></dt></dl></dd><dt><span class="section"><a href="#N103D2">Project Set up</a></span></dt><dd><dl><dt><span class="section"><a href="#N103D5">On AIX 5.3 (HPC)</a></span></dt><dt><span class="section"><a href="#N1040A">On Ubuntu 8.04</a></span></dt><dt><span class="section"><a href="#N10456">On Windows XP (Visual Studio 2005)</a></span></dt><dt><span class="section"><a href="#N1049E">On Windows Vista (Visual Studio 2008)</a></span></dt></dl></dd><dt><span class="section"><a href="#N104CF">Libraries Build (Optional)</a></span></dt><dd><dl><dt><span class="section"><a href="#N104D2">Compiling PETSc</a></span></dt></dl></dd></dl></dd><dt><span class="chapter"><a href="#N10513">4. Object Interface</a></span></dt><dd><dl><dt><span class="section"><a href="#N10516">Objectives</a></span></dt><dt><span class="section"><a href="#N10520">General Rules</a></span></dt><dt><span class="section"><a href="#N10544">Example(Basis functions)</a></span></dt></dl></dd><dt><span class="chapter"><a href="#N105C9">5. Examples</a></span></dt><dd><dl><dt><span class="section"><a href="#N105CC">Laplace equation</a></span></dt></dl></dd><dt><span class="chapter"><a href="#N10967">6. Library Commands</a></span></dt><dd><dl><dt><span class="section"><a href="#N1096B">Top level</a></span></dt><dd><dl><dt><span class="section"><a href="#N1096E">cmiss</a></span></dt></dl></dd><dt><span class="section"><a href="#N1099C">Basis functions</a></span></dt><dt><span class="section"><a href="#N10A55">Coordinate Systems</a></span></dt><dt><span class="section"><a href="#N10B70">Regions</a></span></dt><dd><dl><dt><span class="section"><a href="#N10C18">Node</a></span></dt><dt><span class="section"><a href="#N10CB5">Mesh</a></span></dt><dt><span class="section"><a href="#N10E41">Field</a></span></dt><dt><span class="section"><a href="#N110CB">Equations Set</a></span></dt></dl></dd><dt><span class="section"><a href="#N1130B">Problems</a></span></dt><dd><dl><dt><span class="section"><a href="#N11421">Solver</a></span></dt></dl></dd></dl></dd><dt><span class="chapter"><a href="#N1154E">7. Coding Style</a></span></dt></dl></div><div class="chapter" lang="en"><div class="titlepage"><div><div><h2 class="title"><a id="N10005" />Chapter 1. Introduction</h2></div></div></div><div class="toc"><p><b>Table of Contents</b></p><dl><dt><span class="sect1"><a href="#N1000A">CMISS</a></span></dt><dt><span class="sect1"><a href="#N10011">Shared Memory Computing vs Distributed Memory Computing</a></span></dt><dt><span class="sect1"><a href="#N10018">Objectives of OpenCMISS</a></span></dt></dl></div><p>
    OpenCMISS is a project for the re-engineering of the CMISS computational engine.
  </p><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="N1000A" />CMISS</h2></div></div></div><p>
      CMISS is an interactive computer program for Continuum Mechanics, Image analysis, Signal processing 
      and System Identification.
      It provides a mathematical modelling environment that allows the application of finite element analysis, 
      boundary element and collocation techniques to a variety of complex bioengineering problems. 
    </p><p>
     CMISS consists of two main components, cmgui and cm. 
     cmgui is a graphical front end with advanced 3D display and modelling capabilities. 
     It is the open source project written in C/C++.   
     cm is a computational backend that may be run remotely on powerful workstations or supercomputers. 
     cm is developed under Fortran 77 and has some licensing limitations.
    </p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="N10011" />Shared Memory Computing vs Distributed Memory Computing</h2></div></div></div><p>
      cm uses OpenMP for shared memory computing. 
      A shared memory system is relatively easy to program since all processors share a single view of data 
      and the communication between processors can be as fast as memory accesses to a shared location. 
      However, the CPU-to-memory connection will eventually become a bottleneck. 
    </p><p>
      Distributed memory systems have increased CPU and memory scalibility compared to shared memory systems, 
      but are much harder to program. The MPI standard is used for message passing.  
    </p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="N10018" />Objectives of OpenCMISS</h2></div></div></div><p>
      OpenCMISS is re-engineering of CMISS cm component. 
      It is intended to give a library based approach to enable use in multiple applications.
      It is developed under Fortan 95 and Modular, easily extendable and programmable.
      It will be integrated with MPI to provide modular, easily extendable and programmable code which is applicable 
      for either MPI based distributed system, OpenMP based shared memory system and/or serial code. 
      It will be open sourced. 
    </p></div></div><div class="chapter" lang="en"><div class="titlepage"><div><div><h2 class="title"><a id="N1001D" />Chapter 2. OpenCMISS Concepts</h2></div></div></div><div class="toc"><p><b>Table of Contents</b></p><dl><dt><span class="section"><a href="#basis">Basis Functions</a></span></dt><dt><span class="section"><a href="#coordinate system">Coordinate Systems</a></span></dt><dt><span class="section"><a href="#regions">Regions</a></span></dt><dd><dl><dt><span class="section"><a href="#nodes">Nodes</a></span></dt><dt><span class="section"><a href="#mesh">Meshes</a></span></dt><dt><span class="section"><a href="#field">Fields</a></span></dt><dt><span class="section"><a href="#equation_set">Equations Sets</a></span></dt></dl></dd><dt><span class="section"><a href="#problem">Problems</a></span></dt><dd><dl><dt><span class="section"><a href="#N1033B">Solutions</a></span></dt><dt><span class="section"><a href="#control">Control</a></span></dt></dl></dd></dl></div><p>openCMISS has the following top level objects.</p><div class="itemizedlist"><ul type="disc"><li>Basis functions</li><li>Coordinate systems</li><li>Nodes</li><li>Regions</li><li>Problems</li><li>Computational environments</li><li>Base system(Diagnostics, I?O etc.)</li></ul></div><div class="mediaobject"><img src="../images/openCMISS_topStructure.JPG" width="486" /></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h2 class="title" style="clear: both"><a id="basis" />Basis Functions</h2></div></div></div><p>
      Basis functions are the key item to specify the field approximation/interpolation and the linking of nodes and elements to form a mesh.
      Currently, it has two types: Lagrange-Hermite tensor product and Simplex.
      Lagrange-Hermite tensor product can be further divided into linear to cubic lagrange, cubic and quadratic hermite. 
      It can be arbitrarily collapsed (two or more nodes in the same location) in any one direction or in any two directions to give a degenerate basis.
      Simplex basic functions could contain line, triangular and tetrahedral elements. 
      It could be linear, quadratic or cubic.
      Arbitrary Gaussian quadrature can integrate from 1st to 5th order (3rd  order for lines at the moment).
      Can only have the same order in each direction at the moment.
      Specifying a basis function automatically generates all necessary line and face basis functions as sub-bases of the basis function.
    </p><p>Basis function has the following attributes:</p><div class="itemizedlist"><ul type="disc"><li>User number</li><li>Global number</li><li>Family number</li><li>Finished tag</li><li>Type</li><li>Is Hermite</li><li>Number of XI</li><li>Number of XI coordinates</li><li>...</li></ul></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h2 class="title" style="clear: both"><a id="coordinate system" />Coordinate Systems</h2></div></div></div><p>
      Coordinate system is a system for assigning an n-tuple of numbers or scalars to each point in an n-dimensional space. 
      It anchors the regions within the real world. 
      Coordinate system can have different types such as:
    </p><div class="itemizedlist"><ul type="disc"><li>Rectangular cartesian</li><li>Cylindrical polar</li><li>Spherical polar</li><li>Prolate spheroidal</li><li>Oblate spheroidal</li></ul></div><p>
      There is a global (world) coordinate system aligned with 3D rectangular cartesian space.
    </p><p>Coordinate system has the following attributes:</p><div class="itemizedlist"><ul type="disc"><li>User number</li><li>Finished tag</li><li>Type</li><li>Number of dimensions</li><li>Focus (for prolate-spheriodal system only)</li><li>Origins</li><li>Orientation</li></ul></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h2 class="title" style="clear: both"><a id="regions" />Regions</h2></div></div></div><p>
      Regions are one of the primary objects in openCMISS. 
      Regions are hierarchical in nature in that a region can have one parent region and a number of daughter sub-regions. 
      Daughter regions are related in space to parent regions by an origin and an orientation of the regions coordinate system.
      Daughter regions may only have the same or fewer dimensions as the parent region.
      There is a global (world) region (number 0) that has the global (world) coordinate system.
    </p><div class="mediaobject"><img src="../images/region_definition.JPG" width="486" /></div><p>Region has the following attributes</p><div class="itemizedlist"><ul type="disc"><li>User number</li><li>Finished tag</li><li>Label</li><li>Number of sub(daughter) regions</li><li>Coordinate system pointer</li><li>Nodes</li><li>Meshes</li><li>Fields</li><li>Equations</li><li>Parent region pointer</li><li>Daughter regions pointers</li></ul></div><div class="mediaobject"><img src="../images/region_structure.JPG" width="486" /></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h3 class="title"><a id="nodes" />Nodes</h3></div></div></div><p>
        There are three places storing nodal information. 
        Nodes associated with region defines the nodes identification and the nodes geometric (initial) position. 
      </p><p>Node has the following attributes</p><div class="itemizedlist"><ul type="disc"><li>User number</li><li>Global number</li><li>Label</li><li>Initial Position</li></ul></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h3 class="title"><a id="mesh" />Meshes</h3></div></div></div><p>
        Meshes are topological constructs within a region which fields use to define themselves.
        Meshes are made up of a number of mesh components.
        All mesh components in a mesh must “conform”, that is have the same number of elements, Xi directions etc. 
      </p><p>Mesh has the following attributes:</p><div class="itemizedlist"><ul type="disc"><li>User number</li><li>Global number</li><li>Finished tag</li><li>Region pointer</li><li>Number of dimensions</li><li>Number of components</li><li>Embedded flag</li><li>Embedding mesh pointer</li><li>Embedded meshes pointers</li><li>Number of elements</li><li>Number of faces</li><li>Number of lines</li><li>Mesh topology pointers</li><li>Decomposition pointers</li></ul></div><div class="mediaobject"><img src="../images/mesh_structure.JPG" width="486" /></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h4 class="title"><a id="mesh_topology" />Mesh Topology</h4></div></div></div><p>
          Mesh components (Topology) are made up from nodes, elements and basis functions.
          A new mesh component is required for each different form of interpolation e.g., one mesh component is bilinear Lagrange and another is biquadratic Lagrange.
        </p><div class="mediaobject"><img src="../images/meshTopology_definition.JPG" width="486" /></div><p>Mesh topology has the following attributes:</p><div class="itemizedlist"><ul type="disc"><li>Mesh component number</li><li>Mesh pointer</li><li>Nodes pointers</li><li>Element pointers</li><li>DOFs pointers</li></ul></div><div class="mediaobject"><img src="../images/meshTopology_structure.JPG" width="486" /></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h4 class="title"><a id="decomposition" />Decompositions</h4></div></div></div><p>
          Mesh decomposition (partitioning) is used to split a computationally expensive mesh into smaller subdomains (parts) for parallel computing. 
        </p><p>Decomposition has the following attributes</p><div class="itemizedlist"><ul type="disc"><li>User number</li><li>Global number</li><li>Finished tag</li><li>Mesh pointer</li><li>Mesh component number</li><li>Decomposition type</li><li>Number of domains</li><li>Number of edge cut</li><li>Element domain numbers</li><li>Decomposition topology pointer</li><li>Domains pointers(list of domain which has the same size as the number of components in the mesh)</li></ul></div><div class="mediaobject"><img src="../images/meshDecomposition_structure.JPG" width="486" /></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h5 class="title"><a id="domain" />Domain</h5></div></div></div><p>Each domain stores domain information for relevant mesh component.</p><p>The domain object contains the following attributes:</p><div class="itemizedlist"><ul type="disc"><li>Decomposition pointer</li><li>Mesh pointer</li><li>Mesh component number</li><li>Region pointer</li><li>Number of dimensions</li><li>Node domain(The domain number that the np'th global node is in for the domain decomposition. Note: the domain numbers start at 0 and go up to the NUMBER_OF_DOMAINS-1)</li><li>Domain mappings(for each mapped object e.g. nodes, elements, etc)</li><li>Domain topology pointer(elements, nodes, DOFs)</li></ul></div><div class="mediaobject"><img src="../images/meshDecompositionDomain_structure.JPG" width="486" /></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h6 class="title"><a id="domain_mapping" />Domain Mappings</h6></div></div></div><p>Stores information for each mapped object e.g. nodes, elements, etc.</p><p>The domain mapping contains the following attributes:</p><div class="itemizedlist"><ul type="disc"><li>Number of local</li><li>Total number of local</li><li>Numbers of domain local</li><li>Number of global</li><li>Number of domains</li><li>Number of internal</li><li>Internal list</li><li>Number of boundary</li><li>Boundary list</li><li>Number of ghost</li><li>Ghost list</li><li>Local to global map</li><li>Global to local map</li><li>Number of adjacent domains</li><li>Pointer to list of adjacent domains by domain number</li><li>List of adjacent domains</li></ul></div><div class="mediaobject"><img src="../images/meshDecompositionDomainMapping_structure.JPG" width="486" /></div></div></div></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h3 class="title"><a id="field" />Fields</h3></div></div></div><p>
        Fields are the central object for storing information and framing the problem.
        Fields have a number of field variables i.e., u, ∂u/∂n, ∂u/∂t, ∂2u/∂t2.
        Each field variable has a number of components.
        A field is defined on a decomposed mesh.
        Each field variable component is defined on a decomposed mesh component.
      </p><p>Field can contains the following attributes:</p><div class="itemizedlist"><ul type="disc"><li>User number</li><li>Global number</li><li>Finished tag</li><li>Region pointer</li><li>Type(Geometric, Fibre, General, Material, Source)</li><li>Dependent type(Independent, Dependent)</li><li>Dimension</li><li>Decomposition pointer</li><li>Number of variables</li><li>Variables</li><li>Scalings sets</li><li>Mappings(DOF-&gt;Field parameters)</li><li>Parameter sets(distributed vectors)</li><li>Geometric field pointer</li><li>Geomatric field parameters</li><li>Create values cache</li></ul></div><div class="mediaobject"><img src="../images/field_structure.JPG" width="486" /></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h4 class="title"><a id="field_variable" />Field variable</h4></div></div></div><p>
          Field variable stores variables for the field such as dependent variables. 
          For example, in the Laplace's equation(FEM), it stores two variables: u and ∂u/∂n.
          Each field variable has a number of components.  
        </p><p>Field variable has the following attributes:</p><div class="itemizedlist"><ul type="disc"><li>Variable number</li><li>Variable type</li><li>Field pointer</li><li>Region pointer</li><li>Max number of interpolation parameters</li><li>Number of DOFs</li><li>Total number of DOFs</li><li>Global DOF List</li><li>Domain mapping pointer</li><li>Number of components</li><li>Components</li></ul></div><div class="mediaobject"><img src="../images/fieldVariable_structure.JPG" width="486" /></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h5 class="title"><a id="field_variable_component" />Field Variable Component</h5></div></div></div><p /><p>Field Variable Component has the following attributes:</p><div class="itemizedlist"><ul type="disc"><li>Component number</li><li>Variable pointer</li><li>Field pointer</li><li>Interpolation type</li><li>Mesh component number</li><li>Scaling index</li><li>Domain pointer</li><li>Max number of interpolation parameters</li><li>Mappings(Field paramters-&gt;DOF)</li></ul></div></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h4 class="title"><a id="parameter_set" />Parameter set</h4></div></div></div><p>Parameter set stores values for each field variable component.</p><div class="mediaobject"><img src="../images/field_parameter_set_definition.JPG" width="486" /></div><p>Parameter set has the following Attributes:</p><div class="itemizedlist"><ul type="disc"><li>Set index</li><li>Set type</li><li>Parameters pointer</li></ul></div></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h3 class="title"><a id="equation_set" />Equations Sets</h3></div></div></div><p>
        Equations sets are aimed to have multiple classes,
        e.g. Elasticity, Fluid mechanics, Electromagnetics, General field problems, Fitting, Optimisation.
        Different equations are within each class, e.g. Bidomain, Navier-stokes etc.
        Each equation can use different solution techniques, e.g. FEM, BEM, FD, GFEM.
        The equation set is associated with a region and is built using the fields defined on the region.
      </p><p>
        The numerical methods are used which will result in a discretised matrix-vector form of the governing equations.
        openCMISS is designed to generate equations sets with a number of "equations" matrices.
      </p><p>e.g, damped mass spring system</p><mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
        <mml:mrow>
          <mml:mi>Mü</mml:mi>
          <mml:mo>+</mml:mo>
          <mml:mi>Cù</mml:mi>
          <mml:mo>+</mml:mo>
          <mml:mi>Ku</mml:mi>
          <mml:mo>=</mml:mo>
          <mml:mi>f</mml:mi>
        </mml:mrow>
      </mml:math><p>will be represented as:</p><div class="mediaobject"><img src="../images/fieldEquationsets-matrix.JPG" width="486" /></div><p>Equations Set has the following attributes:</p><div class="itemizedlist"><ul type="disc"><li>User number</li><li>Global number</li><li>Finished tag</li><li>Region pointer</li><li>Class identifier</li><li>Type identifier</li><li>Sub type identifier</li><li>Linearity type(?)</li><li>Time dependence type(?)</li><li>Solution method</li><li>Geometry (fibre?) field pointer</li><li>Materials field pointer</li><li>Source field pointer</li><li>Dependent field pointer</li><li>Analytic info pointer(Analytic info stored in dependent field currently)</li><li>Fixed conditions</li><li>Equations pointer</li></ul></div><div class="mediaobject"><img src="../images/fieldEquationsets-structure.JPG" width="486" /></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h4 class="title"><a id="equations" />Equations</h4></div></div></div><p>Equation holds the matrices and mapping information.</p><p>
          The Field variable to matrix mappings maps each field variable onto the equations matrices or RHS vector. 
        </p><p>e.g. Laplace(FEM): 2 variables, 1 component</p><div class="mediaobject"><img src="../images/fieldEquationsetsEquations-mappingFEM.JPG" width="486" /></div><p>e.g. Laplace(BEM): 2 variables, 1 component</p><div class="mediaobject"><img src="../images/fieldEquationsetsEquations-mappingBEM.JPG" width="486" /></div><p>e.g. Heat equation(explicit time/FEM space): 2 variables, 1 component</p><div class="mediaobject"><img src="../images/fieldEquationsetsEquations-mappingHeat.JPG" width="486" /></div><p>TODO matrix distribution</p><p>Equations has the following attributes:</p><div class="itemizedlist"><ul type="disc"><li>Equation set pointer</li><li>Finished tag</li><li>Output type</li><li>Sparsity type</li><li>Interpolation pointer</li><li>Linear equation data pointer</li><li>Nonlinear equation data pointer</li><li>Time(non-static) data pointer</li><li>Equations mapping pointer</li><li>Equations Matrices</li></ul></div><div class="mediaobject"><img src="../images/fieldEquationsetsEquations-structure.JPG" width="486" /></div></div></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h2 class="title" style="clear: both"><a id="problem" />Problems</h2></div></div></div><p>
      A problem has a number of solutions (each with their solver) inside a problem control loop. 
      Problem associated with region via solution which maps to equations sets and hence links to region. 
      Multiple problems can be in the same region, or multiple regions can woek to solve one problem. 
    </p><p>Problem has the following attributes:</p><div class="itemizedlist"><ul type="disc"><li>User number</li><li>Global number</li><li>Finished tag</li><li>Class</li><li>Type</li><li>Subtype</li><li>Control pointer</li><li>Number of solutions</li><li>Soultions pointer</li></ul></div><div class="mediaobject"><img src="../images/problem_structure.JPG" width="486" /></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h3 class="title"><a id="N1033B" />Solutions</h3></div></div></div><p>Solution has the following attributes:</p><div class="itemizedlist"><ul type="disc"><li>Solution number</li><li>Finished tag</li><li>Linear solution data pointer</li><li>Nonlinear solution data pointer</li><li>Time (non-static) solution data pointer</li><li>Equations set to add (the next equations set to add)</li><li>Index of added equations set(the last successfully added equations set)</li><li>Soultion mapping(which contains equations sets)</li><li>Solver pointer</li></ul></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h4 class="title"><a id="N10353" />Solvers</h4></div></div></div><p>Solver has the following attributes:</p><div class="itemizedlist"><ul type="disc"><li>Solution pointer</li><li>Finished tag</li><li>Solve type</li><li>Output type</li><li>Sparsity type</li><li>Linear solver pointer</li><li>Non-linear solver pointer</li><li>Time integrationn solver pointer</li><li>Eigenproblem solver pointer</li><li>Solver matrices</li></ul></div><div class="mediaobject"><img src="../images/problemSolutionSolver_structure.JPG" width="486" /></div></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h3 class="title"><a id="control" />Control</h3></div></div></div><p>Control has the following attributes:</p><div class="itemizedlist"><ul type="disc"><li>Problem pointer</li><li>Finished tag</li><li>Control type</li></ul></div></div></div></div><div class="chapter" lang="en"><div class="titlepage"><div><div><h2 class="title"><a id="N10387" />Chapter 3. Obtaining the Code and Setting up the Development Environment</h2></div></div></div><div class="toc"><p><b>Table of Contents</b></p><dl><dt><span class="section"><a href="#N1038A">Obtaining the Code and Libraries</a></span></dt><dd><dl><dt><span class="section"><a href="#N10399">Obtain the Code</a></span></dt><dt><span class="section"><a href="#N103AC">Obtain the Libraries</a></span></dt></dl></dd><dt><span class="section"><a href="#N103D2">Project Set up</a></span></dt><dd><dl><dt><span class="section"><a href="#N103D5">On AIX 5.3 (HPC)</a></span></dt><dt><span class="section"><a href="#N1040A">On Ubuntu 8.04</a></span></dt><dt><span class="section"><a href="#N10456">On Windows XP (Visual Studio 2005)</a></span></dt><dt><span class="section"><a href="#N1049E">On Windows Vista (Visual Studio 2008)</a></span></dt></dl></dd><dt><span class="section"><a href="#N104CF">Libraries Build (Optional)</a></span></dt><dd><dl><dt><span class="section"><a href="#N104D2">Compiling PETSc</a></span></dt></dl></dd></dl></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h2 class="title" style="clear: both"><a id="N1038A" />Obtaining the Code and Libraries</h2></div></div></div><p>
      To obtain the openCMISS source you need to check it out from the subversion repository. 
      There are two parts to openCMISS to obtain - openCMISS itself and the various libraries it needs.
    </p><p>In your root openCMISS directory, make the <code class="filename">opencmiss</code> and <code class="filename">opemcmissextra</code> directories.</p><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h3 class="title"><a id="N10399" />Obtain the Code</h3></div></div></div><p>The openCMISS repository is at https://opencmiss.svn.sourceforge.net/svnroot/opencmiss/cm</p><p>To check out the main trunk of openCMISS issue the following command in the <code class="filename">opencmiss</code> directory:</p><code class="code">svn co https://opencmiss.svn.sourceforge.net/svnroot/opencmiss/cm/trunk cm</code><p>If you are not familar with subversion, have a look at <a href="http://svnbook.red-bean.com" target="_top">here</a>.</p></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h3 class="title"><a id="N103AC" />Obtain the Libraries</h3></div></div></div><p>The openCMISS libraries repository is at http://www.physiome.ox.ac.uk/svn/opencmissextras/cm</p><p>To check out the main trunk of the various libraries required with openCMISS issue the following command in the <code class="filename">opencmissextra</code> directory:</p><code class="code">svn co http://www.physiome.ox.ac.uk/svn/opencmissextras/cm/trunk/external/architecture cm/external/architecture</code></div><p>
      where architecture is the appropriate architecture for the machine. Possible architectures are:
    </p><div class="itemizedlist"><ul type="disc"><li>i386-win32</li><li>i386-win32-debug</li><li>i686-linux</li><li>i686-linux-debug</li><li>x86_64-linux</li><li>x86_64-linux-debug</li><li>rs6000-32-aix</li><li>rs6000-32-aix-debug</li></ul></div><p>
      Currently, the svn repository for openCMISS libraries is down. An alternative location for the libraries is at hpc. 
      Go to <code class="filename">\\bioengsmb\cmiss\opencmissextras\cm</code> and copy the necessary files. 
      The folder structure is the same as svn repository. 
    </p></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h2 class="title" style="clear: both"><a id="N103D2" />Project Set up</h2></div></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h3 class="title"><a id="N103D5" />On AIX 5.3 (HPC)</h3></div></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h4 class="title"><a id="N103D8" />Set environment</h4></div></div></div><p>Set environment variable to point to openCMISS</p><code class="code">setenv OPENCMISS_ROOT=&lt;path to your opencmiss folder&gt;</code><p>Set environment variable to point to openCMISS-extras</p><code class="code">setenv OPENCMISSEXTRAS_ROOT=&lt;path to your opencmissextras folder&gt;</code></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h4 class="title"><a id="N103E3" />Set MPI</h4></div></div></div><p>Create a file called <code class="filename">hostfile.list</code> in your home directory.</p><p>Inside the file, add several lines of “<span class="quote">hpc.bioeng.auckland.ac.nz</span>”</p><p>In <code class="filename">.rhost</code> file in the home direcotry, add “<span class="quote">hpc &lt;username&gt;</span>”</p></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h4 class="title"><a id="N103F8" />Compile</h4></div></div></div><p>Change directory to opencmiss/cm</p><p>Change directory to examples/&lt;example%gt;</p><p>Use <code class="code">gmake</code>.</p><p>This should result in a binary that you can run in the <code class="filename">bin/rs6000-32-aix</code> folder.</p></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h3 class="title"><a id="N1040A" />On Ubuntu 8.04</h3></div></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h4 class="title"><a id="N1040D" />Set environment</h4></div></div></div><p>Set environment variable to point to opencmiss</p><code class="code">setenv OPENCMISS_ROOT=&lt;path to your opencmiss folder&gt;</code><p>Set environment variable to point to opencmiss-extras</p><code class="code">setenv OPENCMISSEXTRAS_ROOT=&lt;path to your opencmissextras folder&gt;</code><p>It is also helpful to add the following</p><code class="code">
          <p>setenv PATH ${OPENCMISSEXTRAS_ROOT}/cm/external/${archname}/bin:${PATH}</p>
          <p>setenv PATH ${OPENCMISS_ROOT}/cm/bin/${archname}:${PATH}</p>
        </code><p>where ${archname} is the appropriate architecture e.g., i686-linux, x86_64-linux.</p><p>If you are using totalview you will also need to add</p><code class="code">setenv LM_LICENSE_FILES &lt;path-to-the-flex-directory&gt;</code></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h4 class="title"><a id="N10428" />Install Compilers</h4></div></div></div><p>Download Intel Fotran Compiler from <a href="http://www.intel.com/cd/software/products/asmo-na/eng/282048.htm" target="_top">here</a>.</p><p>Extract the file and follow the <code class="filename">install.htm</code> to install</p></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h4 class="title"><a id="N10437" />Install MPI</h4></div></div></div><p>Download MPICH2 from <a href="http://www.mcs.anl.gov/research/projects/mpich2/" target="_top">here.</a></p><p>Extract the file and follow the <code class="filename">README</code> to install.</p><p>Remember to set the path as suggested.</p></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h4 class="title"><a id="N10447" />Compile</h4></div></div></div><p>To build an example project:</p><code class="code">make</code><p>To run the example project:</p><code class="code">mpd &amp; mpirun -n 2 path/to/the/execution/file</code><p>To debug the project using TotalView:</p><code class="code">mpd &amp; mpirun -tv 2 path/to/the/execution/file</code></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h3 class="title"><a id="N10456" />On Windows XP (Visual Studio 2005)</h3></div></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h4 class="title"><a id="N10459" />Install Compilers</h4></div></div></div><p>Download Intel Fortran Compiler from <a href="http://www.intel.com/cd/software/products/asmo-na/eng/278834.htm" target="_top">here</a>.</p><p>Execute the exe file and follow the installation wizard.</p></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h4 class="title"><a id="N10464" />Install MPI</h4></div></div></div><p>Download MPICH2 from <a href="http://www.mcs.anl.gov/research/projects/mpich2/" target="_top">here.</a></p><p>You can either download the source archive and follow the <code class="filename">README.windows</code> file to install or download the installer to install.</p><p>Set bin folder to the path</p><p>To start the MPI, run <code class="code">smpd -start</code> in command window.</p><p>NOTE: as from MPICH2 version 1.0.7 the library names have changed. <code class="filename">libmpich2</code> has now become <code class="filename">libmpi</code>!</p></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h4 class="title"><a id="N10483" />Compile and Debug</h4></div></div></div><p>Build the Fortran project under the debug mode and generate the <code class="filename">opencmisstest-debug.exe</code> file.</p><p>In the C Project (since the Fortran projects do not support MPI cluster debugger), configure the debugging properties according to <a href="http://download.microsoft.com/download/6/8/d/68d7d82b-e477-4699-b403-72be2e6218b1/CCS03DebugParallelAppsVS05.doc" target="_top">this</a>.</p><p>The MPIShim location is in the path similar to C:\Program Files\Microsoft Visual Studio 8\Common7\IDE\Remote Debugger\x86\mpishim.exe.</p><p>Debug the C project.</p></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h4 class="title"><a id="N10496" />Run</h4></div></div></div><p>To run the project in the command window:</p><span><strong class="command">mpiexec -n 2 -localroot &lt;path to the execution file&gt;</strong></span></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h3 class="title"><a id="N1049E" />On Windows Vista (Visual Studio 2008)</h3></div></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h4 class="title"><a id="N104A1" />Install Compilers</h4></div></div></div><p>Download Intel Fortran Compiler from <a href="http://www.intel.com/cd/software/products/asmo-na/eng/278834.htm" target="_top">here</a>.</p><p>Execute the exe file and follow the installation wizard.</p></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h4 class="title"><a id="N104AC" />Install MPI</h4></div></div></div><p>Before you install MPICH2 under Vista you must turn off User Account Control</p><div class="orderedlist"><ol type="1"><li>Goto Start -&gt; Control Panel</li><li>Double-click on User Accounts</li><li>Click "Turn User Account Control on or off"</li><li>Untick "Use User Account Control (UAC) to help protect your computer" and click OK</li><li>Restart your computer.</li></ol></div><p>Download from <a href="http://www.mcs.anl.gov/research/projects/mpich2/" target="_top">here</a>. Choose the Win32 IA32 (binary) option.</p><p>Run the downloaded .msi file. Follow all instructions and install "For everybody".</p><p>Once you have installed MPICH2 you can turn User Account Control back on. Follow the instructions above and in 4. tick the "Use User Account Control ...".</p><p>NOTE: as from MPICH2 version 1.0.7 the library names have changed. libmpich2 has now become libmpi!</p></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h4 class="title"><a id="N104CA" />Compile</h4></div></div></div><p>For each example, go into the VisualopenCMISS_08 folder. Double click the VisualopenCMISS project solution file to lauch Visual Studio.</p></div></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h2 class="title" style="clear: both"><a id="N104CF" />Libraries Build (Optional)</h2></div></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h3 class="title"><a id="N104D2" />Compiling PETSc</h3></div></div></div><p>Note this is assuming you have the Intel Fortran compiler version 10.1.024. Adjust the version string as necessary.</p><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h4 class="title"><a id="N104D7" />Step1: Linux Environment installation and Compiler Environment Set up</h4></div></div></div><p>Under windows system:</p><div class="itemizedlist"><ul type="disc"><li>Install Cygwin if you need to. Cywin can be found <a href="http://www.cygwin.com/" target="_top">here</a>. Make sure you include the make and python modules when you install.</li><li>Lauch a Command Prompt Window</li><li>Run the ifortvars.bat batch file to setup your Intel Fortran environment. e.g., "C:\Program Files\Intel\Compiler\Fortran\10.1.024\IA32\Bin\ifortvars.bat"</li><li>Run the Cygwin batch file to setup the unix environment e.g., "C:\Cygwin\Cygwin.bat"</li></ul></div><p>For Linux</p><p>TODO</p></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h4 class="title"><a id="N104ED" />Step2: Compile PETSC</h4></div></div></div><div class="itemizedlist"><ul type="disc"><li>Change to the opencmissextras PETSc directory e.g., if opencmissextras root is E:\opencmissextras and we are compiling PETSC version petsc-2.3.3-p8 then "cd /cygwin/e/opencmissextras/cm/external/packages/PETSc/petsc-2.3.3-p8"</li><li>If you have MPICH2 version 1.0.7 or greater edit the python/BuildSystem/config/packages/MPI.py file. Find the self.liblist_mpich line. After the line "['fmpich2.lib','mpich2.lib']," add the line "['fmpich2.lib','mpi.lib'],".</li><li><code class="code">PETSC_DIR=/cygdrive/e/opencmissextras/cm/external/packages/PETSc/petsc-2.3.3-p8; export PETSC_DIR</code></li><li><p>For a debug install issue the following commands</p><code class="code">
              <p>PETSC_ARCH=cygwin-c-debug; export PETSC_ARCH</p>
              <p>config/configure.py --prefix=/cygdrive/e/opencmissextras/cm/external/i386-win32-debug --with-shared=no --with-cc='win32fe cl' --with-fc='win32fe ifort' --with-cxx='win32fe cl' --download-f-blas-lapack=1 LIBS=-L'/cygdrive/c/Program\ Files/Intel/Compiler/Fortran/10.1.024/IA32/Lib' --with-debugging=yes</p>
            </code><p>For a non-debug install issue the following commands</p><code class="code">
              <p>PETSC_ARCH=cygwin-c-opt; export PETSC_ARCH</p>
              <p>config/configure.py --prefix=/cygdrive/e/opencmissextras/cm/external/i386-win32 --with-shared=no --with-cc='win32fe cl' --with-fc='win32fe ifort' --with-cxx='win32fe cl' --download-f-blas-lapack=1 LIBS=-L'/cygdrive/c/Program\ Files/Intel/Compiler/Fortran/10.1.024/IA32/Lib' --with-debugging=no</p>
            </code></li><li><code class="code">make -e all</code></li><li><code class="code">make -e install</code></li></ul></div></div></div></div></div><div class="chapter" lang="en"><div class="titlepage"><div><div><h2 class="title"><a id="N10513" />Chapter 4. Object Interface</h2></div></div></div><div class="toc"><p><b>Table of Contents</b></p><dl><dt><span class="section"><a href="#N10516">Objectives</a></span></dt><dt><span class="section"><a href="#N10520">General Rules</a></span></dt><dt><span class="section"><a href="#N10544">Example(Basis functions)</a></span></dt></dl></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h2 class="title" style="clear: both"><a id="N10516" />Objectives</h2></div></div></div><div class="itemizedlist"><ul type="disc"><li>Simple interface for a variety of scripting and programming languages</li><li>User friendly in that the library should sensibly set default parameters to minimise the amount of information the programmer/user has to send</li><li>Should be extensible so that extra parameters can be added at a later stage without causing problems</li></ul></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h2 class="title" style="clear: both"><a id="N10520" />General Rules</h2></div></div></div><div class="itemizedlist"><ul type="disc"><li>Objects identified by a unique user number</li><li>Objects are initialised with a <code class="code">OBJECT_INITIALISE</code> call</li><li>Objects are finalised with a <code class="code">OBJECT_FINALISE</code> call</li><li>Objects are created with a pair of <code class="code">OBJECT_CREATE_START</code> and <code class="code">OBJECT_CREATE_FINISH</code> calls</li><li>Objects are destroyed with a <code class="code">OBJECT_DESTROY</code> call</li><li>Object parameters are set with a number of <code class="code">OBJECT_PARAMETER_SET</code> calls between the START and FINISH calls</li><li>START call initialises OBJECT and sets default parameters. SET calls modify default parameters. FINISH call finalises the object</li></ul></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h2 class="title" style="clear: both"><a id="N10544" />Example(Basis functions)</h2></div></div></div><pre class="programlisting">!Initialise the basis functions.
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>BASES_INITIALISE</strong></span>(<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Start the creation of a basis with a user <span class="strong"><strong>number</strong></span> of 1. 
!The default is tri-linear Lagrange
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>BASIS_CREATE_START</strong></span>(1,BASIS,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Set the <span class="strong"><strong>number</strong></span> of xi directions <span class="strong"><strong>to</strong></span> 2.
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>BASIS_NUMBER_OF_XI_SET</strong></span>(BASIS,2,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Set the interpolation <span class="strong"><strong>to</strong></span> be cubic Hermite<span class="emphasis"><em>*quadratic Lagrange.</em></span>
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>BASIS_INTERPOLATION_XI_SET</strong></span>(BASIS, &amp;
&amp; (/CUBIC_HERMITE,QUADRATIC_LAGRANGE/),<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Finish the creation of the basis.
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>BASIS_CREATE_FINISH</strong></span>(BASIS,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Destroy the basis with the user <span class="strong"><strong>number</strong></span> 1.
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>BASIS_DESTROY</strong></span>(1,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Finalise the basis functions.
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>BASES_FINALISE</strong></span>(<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999) </em></span></pre></div></div><div class="chapter" lang="en"><div class="titlepage"><div><div><h2 class="title"><a id="N105C9" />Chapter 5. Examples</h2></div></div></div><div class="toc"><p><b>Table of Contents</b></p><dl><dt><span class="section"><a href="#N105CC">Laplace equation</a></span></dt></dl></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h2 class="title" style="clear: both"><a id="N105CC" />Laplace equation</h2></div></div></div><pre class="programlisting">!Initialise CMISS.
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>CMISS_INITIALISE</strong></span>(<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>

!Start the creation a coordinate <span class="strong"><strong>system </strong></span>(default 3D RC)
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>COORDINATE_SYSTEM_CREATE_START</strong></span>(1,COORDINATE_SYSTEM,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Set the coordinate system <span class="strong"><strong>to</strong></span> be 2D
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>COORDINATE_SYSTEM_DIMENSION_SET</strong></span>(COORDINATE_SYSTEM,2,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Finish the creation a coordinate system
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>COORDINATE_SYSTEM_CREATE_FINISH</strong></span>(COORDINATE_SYSTEM,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>

!Start the creation of a region with a coordinate system.
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>REGION_CREATE_START</strong></span>(1,COORDINATE_SYSTEM,REGION,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Finish the creation of a region
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>REGION_CREATE_FINISH</strong></span>(REGION,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>

!Start the creation of a <span class="strong"><strong>basis </strong></span>(default tri-linear Lagrange)
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>BASIS_CREATE_START</strong></span>(1,BASIS,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Set the <span class="strong"><strong>number</strong></span> of Xi directions <span class="strong"><strong>to</strong></span> 2 (bi-linear Lagrange)
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>BASIS_NUMBER_XI_SET</strong></span>(BASIS,2,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Finish the creation of a basis
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>BASIS_CREATE_FINISH</strong></span>(BASIS,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>

  
  
!Start the creation of a generated mesh in the region
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>GENERATED_MESH_CREATE_START</strong></span>(1,REGION,GENERATED_MESH,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Set up a regular 100x100 mesh
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>GENERATED_MESH_TYPE_SET</strong></span>(GENERATED_MESH,GENERATED_MESH_REGULAR_TYPE, &amp;
    &amp; <span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>GENERATED_MESH_BASIS_SET</strong></span>(GENERATED_MESH,BASIS,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>GENERATED_MESH_EXTENT_SET</strong></span>(GENERATED_MESH,(/2.0_DP,1.0_DP/),<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>GENERATED_MESH_NUMBER_OF_ELEMENTS_SET</strong></span>(GENERATED_MESH,(/100,100/), &amp;
    &amp; <span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Finish the creation of a generated mesh in the region
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>GENERATED_MESH_CREATE_FINISH</strong></span>(GENERATED_MESH,MESH,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>

!Start the creation a decomposition on a mesh
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>DECOMPOSITION_CREATE_START</strong></span>(1,MESH,DECOMPOSITION,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Set the decomposition so that the domains are calculated
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>DECOMPOSITION_TYPE_SET</strong></span>(DECOMPOSITION,DECOMPOSITION_CALCULATED_TYPE, &amp;
    &amp; <span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>DECOMPOSITION_NUMBER_OF_DOMAINS_SET</strong></span>(DECOMPOSITION,5,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Finish the creation of decomposition
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>DECOMPOSITION_CREATE_FINISH</strong></span>(DECOMPOSITION,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>

  

!Start the creation of a field on a <span class="strong"><strong>region </strong></span>(default geometric)
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>FIELD_CREATE_START</strong></span>(1,REGION,GEOMETRIC_FIELD,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Set the decomposition the field will use
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>FIELD_MESH_DECOMPOSITION_SET</strong></span>(GEOMETRIC_FIELD,DECOMPOSITION,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Set mesh components each of the field variable components will use. NB. These
!are shown for example as each field variable component will default <span class="strong"><strong>to</strong></span> the
!first mesh component.
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>FIELD_COMPONENT_MESH_COMPONENT_SET</strong></span>(GEOMETRIC_FIELD, &amp;
    &amp; FIELD_STANDARD_VARIABLE_TYPE,1,1,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>FIELD_COMPONENT_MESH_COMPONENT_SET</strong></span>(GEOMETRIC_FIELD, &amp;
    &amp; FIELD_STANDARD_VARIABLE_TYPE,2,1,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Finish the creation of a field
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>FIELD_CREATE_FINISH</strong></span>(GEOMETRIC_FIELD,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>

!Set a field value in a <span class="strong"><strong>parameter</strong></span> set
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>FIELD_PARAMETER_SET_UPDATE_NODE</strong></span>(GEOMETRIC_FIELD, &amp;
    &amp; FIELD_VALUES_SET_TYPE,1,1,1,FIELD_STANDARD_VARIABLE_TYPE, &amp;
    &amp; 1.0_DP,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Start the update of field values in a <span class="strong"><strong>parameter</strong></span> set
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>FIELD_PARAMETER_SET_UPDATE_START</strong></span>(GEOMETRIC_FIELD, &amp;
    &amp; FIELD_VALUES_SET_TYPE,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!!<span class="strong"><strong>DO</strong></span> SOME CALCULATIONS
!Finish the update of field values in a <span class="strong"><strong>parameter</strong></span> set
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>FIELD_PARAMETER_SET_UPDATE_FINISH</strong></span>(GEOMETRIC_FIELD, &amp;
    &amp; FIELD_VALUES_SET_TYPE,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
  
    
  
!Start the creation of an equations set on a region
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>EQUATIONS_SET_CREATE_START</strong></span>(1,REGION,GEOMETRIC_FIELD,EQUATIONS_SET, &amp;
    &amp; <span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Set the equations set <span class="strong"><strong>to</strong></span> be standard Laplace�s equation problem
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>EQUATIONS_SET_SPECIFICATION_SET</strong></span>(EQUATIONS_SET, &amp;
    &amp; EQUATIONS_SET_CLASSICAL_FIELD_CLASS,EQUATIONS_SET_LAPLACE_EQUATION_TYPE, &amp;
    &amp; EQUATIONS_SET_STANDARD_LAPLACE_SUBTYPE,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Finish the creation of an equations set
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>EQUATIONS_SET_CREATE_FINISH</strong></span>(EQUATIONS_SET,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>

!Start the creation of the equations set dependent field
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>EQUATIONS_SET_DEPENDENT_CREATE_START</strong></span>(EQUATIONS_SET,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Finish the create of the problems dependent field
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>EQUATIONS_SET_DEPENDENT_CREATE_FINISH</strong></span>(EQUATIONS_SET,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>

!Start the creation of the equations set fixed conditions
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>EQUATIONS_SET_FIXED_CONDITIONS_CREATE_START</strong></span>(EQUATIONS_SET,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Set BC�s
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>EQUATIONS_SET_FIXED_CONDITIONS_SET_DOF</strong></span>(EQUATIONS_SET,1, &amp;
    &amp; EQUATIONS_SET_FIXED_BOUNDARY_CONDITION,0.0_DP,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>EQUATIONS_SET_FIXED_CONDITIONS_SET_DOF</strong></span>(PROBLEM,10, &amp;
    &amp; EQUATIONS_SET_FIXED_BOUNDARY_CONDITION,1.0_DP,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Finish the create of the equations set fixed conditions
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>EQUATIONS_SET_FIXED_CONDITIONS_CREATE_FINISH</strong></span>(EQUATIONS_SET,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
 
  
  
 !Start the creation of the equations for the equations set
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>EQUATIONS_SET_EQUATIONS_CREATE_START</strong></span>(EQUATIONS_SET,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Set the equations matrices sparsity <span class="strong"><strong>type</strong></span>
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>EQUATIONS_SET_SPARSITY_TYPE_SET</strong></span>(EQUATIONS_SET,EQUATIONS_SET_SPARSE_MATRICES, &amp; 
    &amp; <span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Set the equations output <span class="strong"><strong>type</strong></span>
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>EQUATIONS_SET_OUTPUT_TYPE_SET</strong></span>(EQUATIONS_SET,EQUATIONS_SET_TIMING_OUTPUT, &amp;
    &amp; <span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Finish the creation of the equations for the equations set
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>EQUATIONS_SET_EQUATIONS_CREATE_FINISH</strong></span>(EQUATIONS_SET,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>

!Start the creation of a problem
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>PROBLEM_CREATE_START</strong></span>(1,PROBLEM,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Set the problem set <span class="strong"><strong>to</strong></span> be standard Laplace�s equation problem
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>PROBLEM_SPECIFICATION_SET</strong></span>(PROBLEM,PROBLEM_CLASSICAL_FIELD_CLASS, &amp;
    &amp; PROBLEM_LAPLACE_EQUATION_TYPE,PROBLEM_STANDARD_LAPLACE_SUBTYPE,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Finish the creation of a problem
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>PROBLEM_CREATE_FINISH</strong></span>(PROBLEM,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>

!Start the creation of the control for a problem
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>PROBLEM_CONTROL_CREATE_START</strong></span>(PROBLEM,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Finish the creation of the control a problem
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>PROBLEM_CONTROL_CREAT_CREATE_FINISH</strong></span>(PROBLEM,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
 
  
 
 !Start the creation of the solutions for the problem
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>PROBLEM_SOLUTIONS_CREATE_START</strong></span>(PROBLEM,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Add in the equations set
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>PROBLEM_SOLUTIONS_EQUATIONS_SET_ADD</strong></span>(PROBLEM,1,EQUATIONS_SET,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Set the solutions output <span class="strong"><strong>type</strong></span>
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>PROBLEM_SOLUTIONS_OUTPUT_TYPE_SET</strong></span>(PROBLEM,1,PROBLEM_SOLUTION_MATRIX_OUTPUT, &amp;
    &amp; <span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Finish the creation of the solutions for the problem
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>PROBLEM_SOLUTIONS_CREATE_FINISH</strong></span>(PROBLEM,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>

!Start the creation of the solvers for the problem
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>PROBLEM_SOLVER_CREATE_START</strong></span>(PROBLEM,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Set the <span class="strong"><strong>type</strong></span> of preconditioner
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>PROBLEM_SOLVER_ITERATIVE_PRECONDITIONER_TYPE_SET</strong></span>(PROBLEM,1, &amp;
    &amp; PROBLEM_SOLVER_ITERATIVE_INCOMPLETE_LU_PRECONDITIONER,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Set the <span class="strong"><strong>number</strong></span> of iterations
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>PROBLEM_SOLVER_ITERATIVE_MAX_ITERATIONS_SET</strong></span>(PROBLEM,1,100,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Set the output <span class="strong"><strong>type</strong></span>
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>PROBLEM_SOlVER_OUTPUT_TYPE_SET</strong></span>(PROBLEM,1,PROBLEM_SOLVER_TIMING_OUTPUT, &amp;
    &amp; <span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
!Finish the creation of the solvers for the problem
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>PROBLEM_SOLVER_CREATE_FINISH</strong></span>(PROBLEM,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>

!Solve the problem
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>PROBLEM_SOLVE</strong></span>(PROBLEM,<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>

!Finalise CMISS.
<span class="strong"><strong>CALL</strong></span> <span class="strong"><strong>CMISS_FINALISE</strong></span>(<span class="strong"><strong>ERR</strong></span>,ERROR,<span class="emphasis"><em>*999)</em></span>
</pre></div></div><div class="chapter" lang="en"><div class="titlepage"><div><div><h2 class="title"><a id="N10967" />Chapter 6. Library Commands</h2></div></div></div><div class="toc"><p><b>Table of Contents</b></p><dl><dt><span class="section"><a href="#N1096B">Top level</a></span></dt><dd><dl><dt><span class="section"><a href="#N1096E">cmiss</a></span></dt></dl></dd><dt><span class="section"><a href="#N1099C">Basis functions</a></span></dt><dt><span class="section"><a href="#N10A55">Coordinate Systems</a></span></dt><dt><span class="section"><a href="#N10B70">Regions</a></span></dt><dd><dl><dt><span class="section"><a href="#N10C18">Node</a></span></dt><dt><span class="section"><a href="#N10CB5">Mesh</a></span></dt><dt><span class="section"><a href="#N10E41">Field</a></span></dt><dt><span class="section"><a href="#N110CB">Equations Set</a></span></dt></dl></dd><dt><span class="section"><a href="#N1130B">Problems</a></span></dt><dd><dl><dt><span class="section"><a href="#N11421">Solver</a></span></dt></dl></dd></dl></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h2 class="title" style="clear: both"><a id="N1096B" />Top level</h2></div></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h3 class="title"><a id="N1096E" />cmiss</h3></div></div></div><span><strong class="command">CMISS_FINALISE(ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Finalises CMISS.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>ERR: The error string</li><li>ERROR: The error code</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">CMISS_INITIALISE(ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Initialises CMISS.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">CMISS_WRITE_ERROR(ERR, ERROR)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Writes the error string to screen.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>ERR: The error code</li><li>ERROR: The error string</li></ul></div></li></ul></div></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h2 class="title" style="clear: both"><a id="N1099C" />Basis functions</h2></div></div></div><span><strong class="command">
    <p>BASIS_ROUTINES::BASIS_INTERPOLATE_GAUSS</p>
</strong></span><span><strong class="command">
    <p>BASIS_ROUTINES::BASIS_INTERPOLATE_XI</p>
</strong></span><span><strong class="command">
    <p>BASIS_ROUTINES::BASIS_INTERPOLATION_XI_SET</p>
</strong></span><span><strong class="command">
    <p>BASIS_ROUTINES::BASIS_NUMBER_OF_XI_SET</p>
</strong></span><span><strong class="command">
    <p>BASIS_ROUTINES::BASIS_TYPE_SET</p>
</strong></span><span><strong class="command">
    <p>BASIS_ROUTINES::BASIS_COLLAPSED_XI_SET</p>
</strong></span><span><strong class="command">
    <p>BASIS_ROUTINES::BASIS_QUADRATURE_NUMBER_OF_GAUSS_XI_SET</p>
</strong></span><span><strong class="command">
    <p>BASIS_ROUTINES::BASIS_QUADRATURE_ORDER_SET</p>
</strong></span><span><strong class="command">
    <p>BASIS_ROUTINES::BASIS_QUADRATURE_TYPE_SET</p>
</strong></span><span><strong class="command">
    <p>BASIS_ROUTINES::SIMPLEX_LINEAR_EVALUATE</p>
</strong></span><span><strong class="command">
    <p>BASIS_ROUTINES::SIMPLEX_QUADRATIC_EVALUATE</p>
</strong></span><span><strong class="command">
    <p>BASIS_ROUTINES::SIMPLEX_CUBIC_EVALUATE</p>
</strong></span><span><strong class="command">
    <p>BASIS_ROUTINES::BASIS_LHTP_BASIS_EVALUATE</p>
</strong></span><span><strong class="command">BASES_FINALISE(ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Finalises the bases and deallocates all memory.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">BASES_INITIALISE(ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Initialises the bases.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">BASIS_CREATE_FINISH(BASIS, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Finishes the creation of a new basis.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>BASIS: A pointer to the basis to finish the creation of</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">BASIS_CREATE_START(USER_NUMBER, BASIS, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Starts the creation of a new basis.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>USER_NUMBER: The user number of the basis to start the creation of</li><li>BASIS: A pointer to the created basis. Must not be associated on entry.</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">BASIS_NUMBER_OF_NODES_GET(BASIS, NUMBER_OF_NODES, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Returns the number of local nodes in the specified basis.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>BASIS: A pointer to the basis to get the number of nodes</li><li>NUMBER_OF_NODES: On exit, the number of local nodes in the basis</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">BASIS_USER_NUMBER_FIND(USER_NUMBER, BASIS, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Finds and returns in BASIS a pointer to the basis with the number given in USER_NUMBER. If no basis with that number exits BASIS is left nullified.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>USER_NUMBER: The user number of the basis to find.</li><li>BASIS: On exit, a pointer to the found basis. If no basis with the given user number exists the pointer is NULL.</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h2 class="title" style="clear: both"><a id="N10A55" />Coordinate Systems</h2></div></div></div><span><strong class="command">
    <p>COORDINATE_ROUTINES::COORDINATE_SYSTEM_PTR_TYPE</p>
</strong></span><span><strong class="command">
    <p>COORDINATE_ROUTINES::COORDINATE_SYSTEMS_TYPE</p>
</strong></span><span><strong class="command">
    <p>COORDINATE_ROUTINES::COORDINATE_CONVERT_FROM_RC</p>
</strong></span><span><strong class="command">
    <p>COORDINATE_ROUTINES::COORDINATE_CONVERT_TO_RC</p>
</strong></span><span><strong class="command">
    <p>COORDINATE_ROUTINES::COORDINATE_DELTA_CALCULATE</p>
</strong></span><span><strong class="command">
    <p>COORDINATE_ROUTINES::COORDINATE_SYSTEM_DIMENSION_SET</p>
</strong></span><span><strong class="command">
    <p>COORDINATE_ROUTINES::COORDINATE_SYSTEM_FOCUS_SET</p>
</strong></span><span><strong class="command">
    <p>COORDINATE_ROUTINES::COORDINATE_SYSTEM_RADIAL_INTERPOLATION_TYPE_SET</p>
</strong></span><span><strong class="command">
    <p>COORDINATE_ROUTINES::COORDINATE_SYSTEM_TYPE_SET</p>
</strong></span><span><strong class="command">
    <p>COORDINATE_ROUTINES::COORDINATE_SYSTEM_ORIGIN_SET</p>
</strong></span><span><strong class="command">
    <p>COORDINATE_ROUTINES::COORDINATE_SYSTEM_ORIENTATION_SET</p>
</strong></span><span><strong class="command">
    <p>COORDINATE_ROUTINES::DXZ</p>
</strong></span><span><strong class="command">
    <p>COORDINATE_ROUTINES::D2ZX</p>
</strong></span><span><strong class="command">
    <p>COORDINATE_ROUTINES::DZX</p>
</strong></span><span><strong class="command">
    <p>COORDINATE_ROUTINES::COORDINATE_DERIVATIVE_CONVERT_TO_RC</p>
</strong></span><span><strong class="command">
    <p>COORDINATE_ROUTINES::COORDINATE_SYSTEM_DESTROY</p>
</strong></span><span><strong class="command">COORDINATE_METRICS_CALCULATE(COORDINATE_SYSTEM, JACOBIAN_TYPE, METRICS, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: </li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>COORDINATE_SYSTEM: </li><li>JACOBIAN_TYPE: </li><li>METRICS: </li><li>ERR: </li><li>ERROR: </li><li>*: </li></ul></div></li></ul></div><span><strong class="command">COORDINATE_SYSTEM_FOCUS_GET(COORDINATE_SYSTEM, ERR, ERROR)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: </li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>COORDINATE_SYSTEM: </li><li>ERR: </li><li>ERROR: </li></ul></div></li></ul></div><span><strong class="command">COORDINATE_SYSTEM_CREATE_START(USER_NUMBER, COORDINATE_SYSTEM, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: </li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>USER_NUMBER: </li><li>COORDINATE_SYSTEM: </li><li>ERR: </li><li>ERROR: </li><li>*: </li></ul></div></li></ul></div><span><strong class="command">COORDINATE_SYSTEM_CREATE_FINISH(COORDINATE_SYSTEM, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: </li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>COORDINATE_SYSTEM: </li><li>ERR: </li><li>ERROR: </li><li>*: </li></ul></div></li></ul></div><span><strong class="command">COORDINATE_DERIVATIVE_NORM(COORDINATE_SYSTEM, PART_DERIV_INDEX, INTERPOLATED_POINT, DERIV_NORM, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: </li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>COORDINATE_SYSTEM: </li><li>PART_DERIV_INDEX: </li><li>INTERPOLATED_POINT: </li><li>DERIV_NORM: </li><li>ERR: </li><li>ERROR: </li><li>*: </li></ul></div></li></ul></div><span><strong class="command">COORDINATE_INTERPOLATION_ADJUST(COORDINATE_SYSTEM, PARTIAL_DERIVATIVE_INDEX, VALUE, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: </li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>COORDINATE_SYSTEM: </li><li>PARTIAL_DERIVATIVE_INDEX: </li><li>VALUE: </li><li>ERR: </li><li>ERROR: </li><li>*: </li></ul></div></li></ul></div><span><strong class="command">COORDINATE_INTERPOLATION_PARAMETERS_ADJUST(COORDINATE_SYSTEM, INTERPOLATION_PARAMETERS, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: </li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>COORDINATE_SYSTEM: </li><li>INTERPOLATION_PARAMETERS: </li><li>ERR: </li><li>ERROR: </li><li>*: </li></ul></div></li></ul></div><span><strong class="command">COORDINATE_SYSTEM_USER_NUMBER_FIND(USER_NUMBER, COORDINATE_SYSTEM, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: </li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>USER_NUMBER: </li><li>COORDINATE_SYSTEM: </li><li>ERR: </li><li>ERROR: </li><li>*: </li></ul></div></li></ul></div><span><strong class="command">COORDINATE_SYSTEMS_FINALISE(ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: </li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>ERR: </li><li>ERROR: </li><li>*: </li></ul></div></li></ul></div><span><strong class="command">COORDINATE_SYSTEMS_INITIALISE(ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: </li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>ERR: </li><li>ERROR: </li><li>*: </li></ul></div></li></ul></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h2 class="title" style="clear: both"><a id="N10B70" />Regions</h2></div></div></div><span><strong class="command">
    <p>REGION_ROUTINES::REGION_COORDINATE_SYSTEM_SET</p>
</strong></span><span><strong class="command">
    <p>REGION_ROUTINES::REGION_LABEL_SET</p>
</strong></span><span><strong class="command">REGION_COORDINATE_SYSTEM_GET(REGION, ERR, ERROR)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: </li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>REGION: </li><li>ERR: </li><li>ERROR: </li></ul></div></li></ul></div><span><strong class="command">REGION_CREATE_FINISH(REGION, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: </li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>REGION: </li><li>ERR: </li><li>ERROR: </li><li>*: </li></ul></div></li></ul></div><span><strong class="command">REGION_CREATE_START(USER_NUMBER, REGION, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: </li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>USER_NUMBER: </li><li>REGION: </li><li>ERR: </li><li>ERROR: </li><li>*: </li></ul></div></li></ul></div><span><strong class="command">REGION_LABEL_GET(REGION, ERR, ERROR)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: </li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>REGION: </li><li>ERR: </li><li>ERROR: </li></ul></div></li></ul></div><span><strong class="command">REGION_SUB_REGION_CREATE_START(USER_NUMBER, PARENT_REGION, SUB_REGION, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: </li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>USER_NUMBER: </li><li>PARENT_REGION: </li><li>SUB_REGION: </li><li>ERR: </li><li>ERROR: </li><li>*: </li></ul></div></li></ul></div><span><strong class="command">REGION_SUB_REGION_CREATE_FINISH(REGION, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: </li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>REGION: </li><li>ERR: </li><li>ERROR: </li><li>*: </li></ul></div></li></ul></div><span><strong class="command">REGION_USER_NUMBER_FIND(USER_NUMBER, REGION, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: </li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>USER_NUMBER: </li><li>REGION: </li><li>ERR: </li><li>ERROR: </li><li>*: </li></ul></div></li></ul></div><span><strong class="command">REGIONS_INITIALISE(ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: </li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>ERR: </li><li>ERROR: </li><li>*: </li></ul></div></li></ul></div><span><strong class="command">REGIONS_FINALISE(ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: </li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>ERR: </li><li>ERROR: </li><li>*: </li></ul></div></li></ul></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h3 class="title"><a id="N10C18" />Node</h3></div></div></div><span><strong class="command">NODE_CHECK_EXISTS(USER_NUMBER, REGION, NODE_EXISTS, GLOBAL_NUMBER, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: </li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>USER_NUMBER: </li><li>REGION: </li><li>NODE_EXISTS: </li><li>GLOBAL_NUMBER: </li><li>ERR: </li><li>ERROR: </li><li>*: </li></ul></div></li></ul></div><span><strong class="command">NODE_DESTROY(NODE, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: </li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>NODE: </li><li>ERR: </li><li>ERROR: </li><li>*: </li></ul></div></li></ul></div><span><strong class="command">NODE_INITIAL_POSITION_SET(GLOBAL_NUMBER, INITIAL_POSITION, NODES, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: </li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>GLOBAL_NUMBER: </li><li>INITIAL_POSITION: </li><li>NODES: </li><li>ERR: </li><li>ERROR: </li><li>*: </li></ul></div></li></ul></div><span><strong class="command">NODE_NUMBER_SET(GLOBAL_NUMBER, USER_NUMBER, NODES, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: </li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>GLOBAL_NUMBER: </li><li>USER_NUMBER: </li><li>NODES: </li><li>ERR: </li><li>ERROR: </li><li>*: </li></ul></div></li></ul></div><span><strong class="command">NODES_CREATE_FINISH(REGION, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: </li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>REGION: </li><li>ERR: </li><li>ERROR: </li><li>*: </li></ul></div></li></ul></div><span><strong class="command">NODES_CREATE_START(NUMBER_OF_NODES, REGION, NODES, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: </li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>NUMBER_OF_NODES: </li><li>REGION: </li><li>NODES: </li><li>ERR: </li><li>ERROR: </li><li>*: </li></ul></div></li></ul></div><span><strong class="command">NODES_FINALISE(REGION, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: </li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>REGION: </li><li>ERR: </li><li>ERROR: </li><li>*: </li></ul></div></li></ul></div><span><strong class="command">NODES_INITIALISE(REGION, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: </li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>REGION: </li><li>ERR: </li><li>ERROR: </li><li>*: </li></ul></div></li></ul></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h3 class="title"><a id="N10CB5" />Mesh</h3></div></div></div><span><strong class="command">
    <p>MESH_ROUTINES::MESH_NUMBER_OF_COMPONENTS_SET</p>
</strong></span><span><strong class="command">
    <p>MESH_ROUTINES::MESH_NUMBER_OF_ELEMENTS_SET</p>
</strong></span><span><strong class="command">DECOMPOSITION_CREATE_FINISH(MESH, DECOMPOSITION, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Finishes the creation of a domain decomposition on a given mesh.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>MESH: A pointer to the mesh to decompose.</li><li>DECOMPOSITION: A pointer to the decomposition to finish creating</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">DECOMPOSITION_CREATE_START(USER_NUMBER, MESH, DECOMPOSITION, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Starts the creation of a domain decomposition for a given mesh.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>USER_NUMBER: The user number of the decomposition</li><li>MESH: A pointer to the mesh to decompose</li><li>DECOMPOSITION: On return a pointer to the created decomposition. Must not be associated on entry.</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">DECOMPOSITION_DESTROY(USER_NUMBER, MESH, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Destroys a domain decomposition identified by a user number and deallocates all memory.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>USER_NUMBER: The user number of the decomposition to destroy.</li><li>MESH: A pointer to the mesh containing the decomposition.</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">DECOMPOSITION_NUMBER_OF_DOMAINS_SET(DECOMPOSITION, NUMBER_OF_DOMAINS, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Sets/changes the number of domains for a decomposition.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>DECOMPOSITION: A pointer to the decomposition to set the number of domains for.</li><li>NUMBER_OF_DOMAINS: The number of domains to set.</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">DECOMPOSITION_TYPE_SET(DECOMPOSITION, TYPE, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Sets/changes the decomposition type for a decomposition.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>DECOMPOSITION: A pointer to the decomposition to set the type for</li><li>TYPE: The decomposition type to set MESH_ROUTINES::DecompositionTypes,MESH_ROUTINES</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">DECOMPOSITION_USER_NUMBER_FIND(USER_NUMBER, MESH, DECOMPOSITION, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Finds and returns in DECOMPOSITION a pointer to the decomposition identified by USER_NUMBER in the given MESH. If no decomposition with that USER_NUMBER exists DECOMPOSITION is left nullified.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>USER_NUMBER: The user number of the decomposition to find</li><li>MESH: A pointer to the mesh containing the decomposition to find</li><li>DECOMPOSITION: On return a pointer to the decomposition with the specified user number. If no decomposition with that user number exists then DECOMPOSITION is returned NULL.</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">DECOMPOSITIONS_FINALISE(MESH, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Finalises the domain decompositions for a given mesh.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>MESH: A pointer to the mesh to finalise the decomposition for</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">DECOMPOSITIONS_INITIALISE(MESH, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Initialises the domain decompositions for a given mesh.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>MESH: A pointer to the mesh to initialise the decompositions for</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">MESH_CREATE_FINISH(REGION, MESH, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Finishes the process of creating a mesh on a region.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>REGION: A pointer to the region containing the mesh</li><li>MESH: A pointer to the mesh to finish creating</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">MESH_CREATE_REGULAR(USER_NUMBER, REGION, ORIGIN, MAXIMUM_EXTENT, NUMBER_ELEMENTS_XI, BASIS, MESH, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Creates the regular mesh with the given USER_NUMBER in the specifed REGION. The mesh starts at the ORIGIN(:) and has a maximum extent position of MAXIMUM_EXTENT(:) with the NUMBER_OF_ELEMENTS(:) in each direction. Each element is of the specified BASIS type. A pointer to the finished mesh is returned in MESH.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>USER_NUMBER: The user number of the mesh to create</li><li>REGION: A pointer to the region containing the mesh</li><li>ORIGIN: ORIGIN(i). ORIGIN(i) contains the i'th coordinate in the region of the origin of the regular mesh.</li><li>MAXIMUM_EXTENT: MAXIMUM_EXTENT(i). MAXIMUM_EXTENT(i) contains the i'th extent (or size) of the regular mesh.</li><li>NUMBER_ELEMENTS_XI: NUMBER_ELEMENTS_XI(i). NUMBER_ELEMENTS_XI(i) contains the number of elements in the i'th direction</li><li>BASIS: A pointer to the basis to use for each element in the regular mesh</li><li>MESH: On return, a pointer to the generated mesh</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">MESH_CREATE_START(USER_NUMBER, REGION, NUMBER_OF_DIMENSIONS, MESH, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Starts the process of creating a mesh defined by a user number with the specified NUMBER_OF_DIMENSIONS in the region identified by REGION.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>USER_NUMBER: The user number of the mesh to create</li><li>REGION: A pointer to the region to create the mesh on</li><li>NUMBER_OF_DIMENSIONS: The number of dimensions in the mesh.</li><li>MESH: On exit, a pointer to the created mesh. Must not be associated on entry.</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">MESH_DESTROY(USER_NUMBER, REGION, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Destroys the mesh identified by a user number on the given region and deallocates all memory.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>USER_NUMBER: The user number of the mesh to destroy</li><li>REGION: A pointer to the region containing the mesh</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">MESH_TOPOLOGY_ELEMENTS_CREATE_FINISH(MESH, MESH_COMPONENT_NUMBER, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Finishes the process of creating elements for a specified mesh component in a mesh topology.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>MESH: A pointer to the mesh to finish creating the elements for</li><li>MESH_COMPONENT_NUMBER: The mesh component number to finish creating the elements for</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">MESH_TOPOLOGY_ELEMENTS_CREATE_START(MESH, MESH_COMPONENT_NUMBER, BASIS, ELEMENTS, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Starts the process of creating elements in the mesh component identified by MESH and component_idx. The elements will be created with a default basis of BASIS. ELEMENTS is the returned pointer to the MESH_ELEMENTS data structure.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>MESH: A pointer to the mesh to start creating the elements on</li><li>MESH_COMPONENT_NUMBER: The mesh component number</li><li>BASIS: A pointer to the default basis to use</li><li>ELEMENTS: On return, a pointer to the created mesh elements</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">MESH_TOPOLOGY_ELEMENTS_ELEMENT_BASIS_SET(GLOBAL_NUMBER, ELEMENTS, BASIS, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Changes/sets the basis for a mesh element identified by a given global number.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>GLOBAL_NUMBER: The global number of the element to set the basis for</li><li>ELEMENTS: A pointer to the elements to set the basis for  before number?</li><li>BASIS: A pointer to the basis to set</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">MESH_TOPOLOGY_ELEMENTS_ELEMENT_NODES_SET(GLOBAL_NUMBER, ELEMENTS, USER_ELEMENT_NODES, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Changes/sets the element nodes for a mesh element identified by a given global number.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>GLOBAL_NUMBER: The global number of the element to set the nodes for</li><li>ELEMENTS: A pointer to the elements to set  before number?</li><li>USER_ELEMENT_NODES: USER_ELEMENT_NODES(i). USER_ELEMENT_NODES(i) is the i'th user node number for the element</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">MESH_TOPOLOGY_ELEMENTS_NUMBER_SET(GLOBAL_NUMBER, USER_NUMBER, ELEMENTS, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Changes/sets the user number for a global element identified by a given global number.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>GLOBAL_NUMBER: The global number of the elements to set.</li><li>USER_NUMBER: The user number of the element to set</li><li>ELEMENTS: A pointer to the elements to set the user number for  This should be the first parameter.</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">MESHES_FINALISE(REGION, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Finalises the meshes in the given region.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>REGION: A pointer to the region to finalise the meshes for.</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">MESHES_INITIALISE(REGION, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Initialises the meshes for the given region.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>REGION: A pointer to the region to initialise the meshes for.</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h3 class="title"><a id="N10E41" />Field</h3></div></div></div><span><strong class="command">
    <p>FIELD_ROUTINES::FIELD_COMPONENT_INTERPOLATION_SET</p>
</strong></span><span><strong class="command">
    <p>FIELD_ROUTINES::FIELD_COMPONENT_MESH_COMPONENT_SET</p>
</strong></span><span><strong class="command">
    <p>FIELD_ROUTINES::FIELD_DEPENDENT_TYPE_SET</p>
</strong></span><span><strong class="command">
    <p>FIELD_ROUTINES::FIELD_DIMENSION_SET</p>
</strong></span><span><strong class="command">
    <p>FIELD_ROUTINES::FIELD_GEOMETRIC_FIELD_SET</p>
</strong></span><span><strong class="command">
    <p>FIELD_ROUTINES::FIELD_MESH_DECOMPOSITION_SET</p>
</strong></span><span><strong class="command">
    <p>FIELD_ROUTINES::FIELD_NUMBER_OF_COMPONENTS_SET</p>
</strong></span><span><strong class="command">
    <p>FIELD_ROUTINES::FIELD_NUMBER_OF_VARIABLES_SET</p>
</strong></span><span><strong class="command">
    <p>FIELD_ROUTINES::FIELD_SCALING_TYPE_SET</p>
</strong></span><span><strong class="command">
    <p>FIELD_ROUTINES::FIELD_TYPE_SET</p>
</strong></span><span><strong class="command">FIELD_CREATE_FINISH(REGION, FIELD, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Finishes the creation of a field on a region.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>REGION: A pointer to the region containing the field</li><li>FIELD: A pointer to the field to finish the creation of</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">FIELD_CREATE_START(USER_NUMBER, REGION, FIELD, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Starts the creation of a field defined by a user number in the specified region.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>USER_NUMBER: The user number for the field</li><li>REGION: A pointer to the region in which to create the field</li><li>FIELD: On return a pointer to the field being created</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">FIELD_DESTROY(FIELD, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Destroys a field identified by a pointer to a field.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>FIELD: A pointer to the field to destroy</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">FIELD_INTERPOLATE_GAUSS(PARTIAL_DERIVATIVE_TYPE, QUADRATURE_SCHEME, GAUSS_POINT_NUMBER, INTERPOLATED_POINT, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Interpolates a field at a gauss point to give an interpolated point. PARTIAL_DERIVATIVE_TYPE controls which partial derivatives are evaluated. If it is NO_PART_DERIV then only the field values are interpolated. If it is FIRST_PART_DERIV then the field values and first partial derivatives are interpolated. If it is SECOND_PART_DERIV the the field values and first and second partial derivatives are evaluated. Old CMISS name XEXG, ZEXG.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>PARTIAL_DERIVATIVE_TYPE: The partial derivative type of the provided field interpolation</li><li>QUADRATURE_SCHEME: The quadrature scheme of the Gauss points BASIS_ROUTINES::QuadratureSchemes,BASIS_ROUTINES</li><li>GAUSS_POINT_NUMBER: The number of the Gauss point to interpolate the field at</li><li>INTERPOLATED_POINT: The pointer to the interpolated point which will contain the field interpolation information at the specified Gauss point</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">FIELD_INTERPOLATE_XI(PARTIAL_DERIVATIVE_TYPE, XI, INTERPOLATED_POINT, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Interpolates a field at a xi location to give an interpolated point. XI is the element location to be interpolated at. PARTIAL_DERIVATIVE_TYPE controls which partial derivatives are evaluated. If it is NO_PART_DERIV then only the field values are interpolated. If it is FIRST_PART_DERIV then the field values and first partial derivatives are interpolated. If it is SECOND_PART_DERIV the the field values and first and second partial derivatives are evaluated. Old CMISS name PXI.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>PARTIAL_DERIVATIVE_TYPE: The partial derivative type of the provide field interpolation</li><li>XI: XI(ni). The ni'th Xi coordinate to evaluate the field at</li><li>INTERPOLATED_POINT: The pointer to the interpolated point which will contain the field interpolation information at the specified Xi point</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">FIELD_INTERPOLATED_POINT_FINALISE(INTERPOLATED_POINT, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Finalises the interpolated point and deallocates all memory.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>INTERPOLATED_POINT: A pointer to the interpolated point to finalise</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">FIELD_INTERPOLATED_POINT_INITIALISE(INTERPOLATION_PARAMETERS, INTERPOLATED_POINT, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Initialises the interpolated point for an interpolation parameters.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>INTERPOLATION_PARAMETERS: A pointer to the interpolation parameters to initialise the interpolated point for</li><li>INTERPOLATED_POINT: On exit, A pointer to the interpolated point that has been initialised</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">FIELD_INTERPOLATED_POINT_METRICS_CALCULATE(JACOBIAN_TYPE, INTERPOLATED_POINT_METRICS, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Calculates the interpolated point metrics and the associated interpolated point.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>JACOBIAN_TYPE: The Jacobian type of the calculation COORDINATE_ROUTINES_JacobianTypes,COORDINATE_ROUTINES</li><li>INTERPOLATED_POINT_METRICS: A pointer to the interpolated point metrics</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">FIELD_INTERPOLATED_POINT_METRICS_FINALISE(INTERPOLATED_POINT_METRICS, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Finalises the interpolated point metrics and deallocates all memory.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>INTERPOLATED_POINT_METRICS: A pointer to the interpolated point metrics to finalise</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">FIELD_INTERPOLATED_POINT_METRICS_INITIALISE(INTERPOLATED_POINT, INTERPOLATED_POINT_METRICS, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Initialises the interpolated point metrics for an interpolated point.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>INTERPOLATED_POINT: </li><li>INTERPOLATED_POINT_METRICS: On exit, a pointer to the interpolated point metrics that have been initialised</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">FIELD_INTERPOLATION_PARAMETERS_ELEMENT_GET(PARAMETER_SET_NUMBER, ELEMENT_NUMBER, INTERPOLATION_PARAMETERS, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Gets the interpolation parameters for a particular element. Old CMISS name XPXE, ZPZE.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>PARAMETER_SET_NUMBER: The field parameter set number to get the element parameters for</li><li>ELEMENT_NUMBER: The element number to get the element parameters for</li><li>INTERPOLATION_PARAMETERS: A pointer to the interpolation parameters</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">FIELD_INTERPOLATION_PARAMETERS_FINALISE(INTERPOLATION_PARAMETERS, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Finalises the interpolation parameters and deallocates all memory.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>INTERPOLATION_PARAMETERS: A pointer to the interpolation parameters to finalise</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">FIELD_INTERPOLATION_PARAMETERS_INITIALISE(FIELD, VARIABLE_NUMBER, INTERPOLATION_PARAMETERS, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Initialises the interpolation parameters for a field variable.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>FIELD: A pointer to the field to initialise the interpolation parameters for</li><li>VARIABLE_NUMBER: The field variable number to initialise the interpolation parameters for</li><li>INTERPOLATION_PARAMETERS: On exit, a pointer to the initialised interpolation parameters.</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">FIELD_INTERPOLATION_PARAMETERS_LINE_GET(PARAMETER_SET_NUMBER, LINE_NUMBER, INTERPOLATION_PARAMETERS, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Gets the interpolation parameters for a particular line. Old CMISS name XPXE, ZPZE.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>PARAMETER_SET_NUMBER: The field parameter set number to get the line parameters for</li><li>LINE_NUMBER: The line number to get the line parameters for</li><li>INTERPOLATION_PARAMETERS: A pointer to the interpolation parameters</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">FIELD_GEOMETRIC_PARAMETERS_UPDATE_FROM_INITIAL_MESH(FIELD, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Updates the geometric field parameters from the initial nodal positions of the mesh. Any derivative values for the nodes are calculated from an average straight line approximation.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>FIELD: A pointer to the field to update the geometric parameters for</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">FIELD_NEXT_NUMBER_FIND(REGION, NEXT_NUMBER, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Finds the next available user number for the fields defined on the given region.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>REGION: A pointer to the region</li><li>NEXT_NUMBER: On exit, the next field user number in the region</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">FIELD_PARAMETER_SET_ADD(FIELD, FIELD_FROM_SET_TYPE, FIELD_TO_SET_TYPE, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Adds the parameter set from one parameter set type to another parameter set type.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>FIELD: A pointer to the field to add the parameter sets for</li><li>FIELD_FROM_SET_TYPE: The field parameter set identifier to add the parameters from</li><li>FIELD_TO_SET_TYPE: The field parameter set identifier to add the parameters to</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">FIELD_PARAMETER_SET_COPY(FIELD, FIELD_FROM_SET_TYPE, FIELD_TO_SET_TYPE, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Copys the parameter set from one parameter set type to another parameter set type.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>FIELD: A pointer to the field to copy the parameters set for</li><li>FIELD_FROM_SET_TYPE: The field parameter set identifier to copy the parameters from</li><li>FIELD_TO_SET_TYPE: The field parameter set identifier to copy the parameters to</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">FIELD_PARAMETER_SET_CREATE(FIELD, FIELD_SET_TYPE, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Creates a new parameter set of type set type for a field.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>FIELD: A pointer to the field to create the parameter set for</li><li>FIELD_SET_TYPE: The field parameter set identifier</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">FIELD_PARAMETER_SET_GET(FIELD, FIELD_SET_TYPE, PARAMETERS, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Returns a pointer to the specified field parameter set array. The pointer must be restored with a call to FIELD_PARAMETER_SET_RESTORE call. Note: the values can be used for read operations but a FIELD_PARAMETER_SET_UPDATE call must be used to change any values.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>FIELD: A pointer to the field to get the parameter set from</li><li>FIELD_SET_TYPE: The field parameter set identifier</li><li>PARAMETERS: On exit, a pointer to the field parameter set data</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">FIELD_PARAMETER_SET_RESTORE(FIELD, FIELD_SET_TYPE, PARAMETERS, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Restores the specified field parameter set array that was obtained with FIELD_PARAMETER_SET_GET.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>FIELD: A pointer to the field to restore the parameter set from</li><li>FIELD_SET_TYPE: The field parameter set identifier</li><li>PARAMETERS: The pointer to the field parameter set data obtained with the parameter set get call</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">FIELD_PARAMETER_SET_UPDATE_CONSTANT(FIELD, FIELD_SET_TYPE, COMPONENT_NUMBER, VARIABLE_NUMBER, VALUE, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Updates the given parameter set with the given value for the constant of the field variable component.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>FIELD: A pointer to the field to update</li><li>FIELD_SET_TYPE: The field parameter set identifier</li><li>COMPONENT_NUMBER: The field variable component number to update</li><li>VARIABLE_NUMBER: The field variable to update</li><li>VALUE: The value to update to</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">FIELD_PARAMETER_SET_UPDATE_DOF(FIELD, FIELD_SET_TYPE, DOF_NUMBER, VALUE, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Updates the given parameter set with the given value for a particular dof of the field.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>FIELD: A pointer to the field to update</li><li>FIELD_SET_TYPE: The field parameter set identifier</li><li>DOF_NUMBER: The dof number to update</li><li>VALUE: The value to update to</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">FIELD_PARAMETER_SET_UPDATE_ELEMENT(FIELD, FIELD_SET_TYPE, ELEMENT_NUMBER, COMPONENT_NUMBER, VARIABLE_NUMBER,&amp;VALUE, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Updates the given parameter set with the given value for a particular element of the field variable component.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>FIELD: A pointer to the field to update</li><li>FIELD_SET_TYPE: The field parameter set identifier</li><li>ELEMENT_NUMBER: The element number to update</li><li>COMPONENT_NUMBER: The field variable component to update</li><li>VARIABLE_NUMBER: The field variable to update</li><li>*: </li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">FIELD_PARAMETER_SET_UPDATE_FINISH(FIELD, FIELD_SET_TYPE, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Finishes the the parameter set update for a field.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>FIELD: A pointer to the field to finish the update for</li><li>FIELD_SET_TYPE: The field parameter set identifier to finish the update for</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">FIELD_PARAMETER_SET_UPDATE_NODE(FIELD, FIELD_SET_TYPE, DERIVATIVE_NUMBER, NODE_NUMBER, COMPONENT_NUMBER, VARIABLE_NUMBER,&amp;VALUE, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Updates the given parameter set with the given value for a particular node and derivative of the field variable component.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>FIELD: A pointer to the field to update</li><li>FIELD_SET_TYPE: The field parameter set identifier</li><li>DERIVATIVE_NUMBER: The node derivative number to update</li><li>NODE_NUMBER: The node number to update</li><li>COMPONENT_NUMBER: The field variable component number to update</li><li>VARIABLE_NUMBER: The field variable to update</li><li>*: </li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">FIELD_PARAMETER_SET_UPDATE_START(FIELD, FIELD_SET_TYPE, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Starts the the parameter set update for a field.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>FIELD: A pointer to the field to start the update for</li><li>FIELD_SET_TYPE: The field parameter set identifier to update</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">FIELDS_FINALISE(REGION, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Finalises the fields for the given region and deallocates all memory.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>REGION: A pointer to the region to finalise the fields for</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">FIELDS_INITIALISE(REGION, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Initialises the fields for the given region.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>REGION: A pointer to the region to initialise the fields for</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h3 class="title"><a id="N110CB" />Equations Set</h3></div></div></div><span><strong class="command">
    <p>EQUATIONS_SET_ROUTINES::EQUATIONS_SET_FIXED_CONDITIONS_SET_DOF</p>
</strong></span><span><strong class="command">
    <p>EQUATIONS_SET_ROUTINES::EQUATIONS_SET_SPECIFICATION_SET</p>
</strong></span><span><strong class="command">EQUATIONS_SET_ASSEMBLE(EQUATIONS_SET, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Assembles the equations for an equations set.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>EQUATIONS_SET: A pointer to the equations set to initialise the analytic solution for.</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">EQUATIONS_SET_BACKSUBSTITUTE(EQUATIONS_SET, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Backsubstitutes with an equations set to calculate unknown right hand side vectors.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>EQUATIONS_SET: A pointer to the equations set to backsubstitute</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">EQUATIONS_SET_CREATE_FINISH(EQUATIONS_SET, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Finishes the process of creating an equation set on a region.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>EQUATIONS_SET: A pointer to the equations set to finish creating</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">EQUATIONS_SET_CREATE_START(USER_NUMBER, REGION, GEOM_FIBRE_FIELD, EQUATIONS_SET, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Starts the process of creating an equations set defined by USER_NUMBER in the region identified by REGION.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>USER_NUMBER: The user number of the equations set</li><li>REGION: A pointer to the region to create the equations set on</li><li>GEOM_FIBRE_FIELD: A pointer to the either the geometry or, in appropriate, the fibre field for the equation set</li><li>EQUATIONS_SET: On return, a pointer to the equations set</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">EQUATIONS_SET_DESTROY(USER_NUMBER, REGION, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Destroys an equations set identified by a user number on the give region and deallocates all memory.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>USER_NUMBER: The user number of the equations set to destroy</li><li>REGION: The region of the equations set to destroy</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">EQUATIONS_SET_FIXED_CONDITIONS_APPLY(EQUATIONS_SET, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Applies the fixed conditions in an equation set to the dependent field in an equations set.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>EQUATIONS_SET: A pointer to the equations set to apply the fixed conditions for.</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">EQUATIONS_SET_FIXED_CONDITIONS_CREATE_FINISH(EQUATIONS_SET, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Finish the creation of fixed conditions for an equation set.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>EQUATIONS_SET: A pointer to the equations set to create the fixed conditions for.</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">EQUATIONS_SET_FIXED_CONDITIONS_CREATE_START(EQUATIONS_SET, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Start the creation of fixed conditions for a problem.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>EQUATIONS_SET: A pointer to the equations set to start the creation of the fixed conditions for</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">EQUATIONS_SET_FIXED_CONDITIONS_DESTROY(EQUATIONS_SET, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Destroy the fixed conditions for an equations set and deallocate all memory.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>EQUATIONS_SET: A pointer to the equations set to destroy the fixed conditions for</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">EQUATIONS_SET_MATERIALS_COMPONENT_INTERPOLATION_SET(EQUATIONS_SET, COMPONENT_NUMBER, INTERPOLATION_TYPE, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Sets/changes the field component interpolation for a materials field of a problem.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>EQUATIONS_SET: A pointer to the equations set to set the materials component interpolation for</li><li>COMPONENT_NUMBER: The component of the material field to set the interpolation for</li><li>INTERPOLATION_TYPE: The interpolation type to set</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">EQUATIONS_SET_MATERIALS_COMPONENT_MESH_COMPONENT_SET(EQUATIONS_SET, COMPONENT_NUMBER, MESH_COMPONENT_NUMBER, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Sets/changes the field component mesh component for a materials field of a problem.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>EQUATIONS_SET: A pointer to the equations set to set the materials field component mesh component for</li><li>COMPONENT_NUMBER: The component number of the equations set materials field to set the mesh component for</li><li>MESH_COMPONENT_NUMBER: The mesh component number to set</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">EQUATIONS_SET_MATERIALS_CREATE_FINISH(EQUATIONS_SET, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Finish the creation of materials for an equations set.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>EQUATIONS_SET: A pointer to the equations set to finish the creation of the materials field for</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">EQUATIONS_SET_MATERIALS_CREATE_START(EQUATIONS_SET, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Start the creation of materials for a problem.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>EQUATIONS_SET: A pointer to the equations set to start the creation of the materials field for</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">EQUATIONS_SET_MATERIALS_DESTROY(EQUATIONS_SET, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Destroy the materials for an equations set.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>EQUATIONS_SET: A pointer to the equations set to destroy the materials for</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">EQUATIONS_SET_MATERIALS_SCALING_SET(EQUATIONS_SET, SCALING_TYPE, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Sets/changes the field scaling for a materials field of an equations set.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>EQUATIONS_SET: A pointer to the equations set to set the scaling on the material field</li><li>SCALING_TYPE: The scaling type to set</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">EQUATIONS_SET_DEPENDENT_COMPONENT_MESH_COMPONENT_SET(EQUATIONS_SET, VARIABLE_NUMBER, COMPONENT_NUMBER,&amp;MESH_COMPONENT_NUMBER, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Sets/changes the field component mesh component for a dependent field of an equations set.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>EQUATIONS_SET: A pointer to the equations set to set the dependent field component mesh component</li><li>VARIABLE_NUMBER: The dependent field variable number to set  this should be variable type???</li><li>COMPONENT_NUMBER: The dependent field component number to set</li><li>*: </li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">EQUATIONS_SET_DEPENDENT_CREATE_FINISH(EQUATIONS_SET, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Finish the creation of a dependent variables for an equations set.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>EQUATIONS_SET: A pointer to the equations set to finish the creation of</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">EQUATIONS_SET_DEPENDENT_CREATE_START(EQUATIONS_SET, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Start the creation of dependent variables for an equations set.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>EQUATIONS_SET: A pointer to the equations set to start the creation of a dependent field on</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">EQUATIONS_SET_DEPENDENT_DEPENDENT_FIELD_GET(EQUATIONS_SET, DEPENDENT_FIELD, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Returns a pointer to the dependent field of the dependent variables for an equations set.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>EQUATIONS_SET: A pointer to the equation set to get the dependent field for</li><li>DEPENDENT_FIELD: On return, a pointer to the dependent field for the equations set. Must not be associated on entry.</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">EQUATIONS_SET_DEPENDENT_DESTROY(EQUATIONS_SET, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Destroy the dependent variables for an equations sety.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>EQUATIONS_SET: The pointer to the equations set to destroy</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">EQUATIONS_SET_DEPENDENT_SCALING_SET(EQUATIONS_SET, SCALING_TYPE, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Sets/changes the field scaling for a dependent field of an equations set.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>EQUATIONS_SET: A pointer to the equations set to the dependent field scaling for.</li><li>SCALING_TYPE: The scaling type to set.</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">EQUATIONS_SET_EQUATIONS_CREATE_FINISH(EQUATIONS_SET, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Finish the creation of equations for the equations set.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>EQUATIONS_SET: A pointer to the equations set to finish the creation of the equations for.</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">EQUATIONS_SET_EQUATIONS_CREATE_START(EQUATIONS_SET, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Start the creation of equations for the equation set.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>EQUATIONS_SET: A pointer to the equations set to create equations for</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">EQUATIONS_SET_EQUATIONS_SPARSITY_TYPE_SET(EQUATIONS_SET, SPARSITY_TYPE, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Sets/changes the sparsity type for the equations set.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>EQUATIONS_SET: A pointer to the equations to set the sparsity type for</li><li>SPARSITY_TYPE: The sparsity type to set EQUATIONS_ROUTINES_SparsityTypes,PROBLEM_ROUTINES</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">EQUATIONS_SET_EQUATIONS_OUTPUT_TYPE_SET(EQUATIONS_SET, OUTPUT_TYPE, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Sets/changes the output type for the equations set.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>EQUATIONS_SET: A pointer to the equations set to set the output type for</li><li>OUTPUT_TYPE: The output type to set EQUATIONS_ROUTINES_OutputTypes,EQUATIONS_ROUTINES</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">EQUATIONS_SET_SOURCE_CREATE_FINISH(EQUATIONS_SET, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Finish the creation of a source for an equation set.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>EQUATIONS_SET: A pointer to the equations set to start the creation of a souce for</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">EQUATIONS_SET_SOURCE_CREATE_START(EQUATIONS_SET, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Start the creation of a source for an equations set.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>EQUATIONS_SET: A pointer to the equations set to start the creation of a source for</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">EQUATIONS_SET_SOURCE_DESTROY(EQUATIONS_SET, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Destroy the source for an equations set.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>EQUATIONS_SET: A pointer to the equations set to destroy the source for</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">EQUATIONS_SET_SOURCE_SCALING_SET(EQUATIONS_SET, SCALING_TYPE, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Sets/changes the field scaling for a source field of an equations set.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>EQUATIONS_SET: A pointer to the equations set to set the scaling on the source field</li><li>SCALING_TYPE: The scaling type to set</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">EQUATIONS_SETS_FINALISE(REGION, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Finalises all equations sets on a region and deallocates all memory.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>REGION: A pointer to the region to finalise the problems for.</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">EQUATIONS_SETS_INITIALISE(REGION, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Intialises all equations sets on a region.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>REGION: A pointer to the region to initialise the equations sets for</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div></div></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h2 class="title" style="clear: both"><a id="N1130B" />Problems</h2></div></div></div><span><strong class="command">
    <p>PROBLEM_ROUTINES::PROBLEM_DESTROY</p>
</strong></span><span><strong class="command">
    <p>PROBLEM_ROUTINES::PROBLEM_SPECIFICATION_SET</p>
</strong></span><span><strong class="command">PROBLEM_CREATE_FINISH(PROBLEM, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Finishes the process of creating a problem.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>PROBLEM: A pointer to the problem to finish creating.</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">PROBLEM_CREATE_START(USER_NUMBER, PROBLEM, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Starts the process of creating a problem defined by USER_NUMBER.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>USER_NUMBER: The user number of the problem to create</li><li>PROBLEM: On return, a pointer to the created problem. Must not be associated on entry.</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">PROBLEM_CONTROL_CREATE_FINISH(PROBLEM, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Finish the creation of the control for the problem.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>PROBLEM: A pointer to the problem to finish the control for</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">PROBLEM_CONTROL_CREATE_START(PROBLEM, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Start the creation of a problem control for a problem.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>PROBLEM: A pointer to the problem to start the creation of a control for.</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">PROBLEM_CONTROL_DESTROY(PROBLEM, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Destroy the control for a problem.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>PROBLEM: A pointer to the problem to destroy the control for.</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">PROBLEM_SOLVE(PROBLEM, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Solves a problem.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>PROBLEM: A pointer to the problem to solve.</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">PROBLEM_SOLUTIONS_CREATE_FINISH(PROBLEM, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Finish the creation of solutions for a problem.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>PROBLEM: A pointer to the problem</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">PROBLEM_SOLUTIONS_CREATE_START(PROBLEM, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Start the creation of a solution for the problem.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>PROBLEM: A pointer to the problem to create a solution for</li><li>ERR: The error code</li><li>ERROR: The error string !&lt;The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">PROBLEM_SOLUTION_EQUATIONS_SET_ADD(PROBLEM, SOLUTION_INDEX, EQUATIONS_SET, EQUATIONS_SET_INDEX, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Adds an equations set to a problem solution.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>PROBLEM: A pointer to the problem to add the equations set to a solution</li><li>SOLUTION_INDEX: The solution index in the problem to add the equations set to</li><li>EQUATIONS_SET: A pointer to the equations set to add</li><li>EQUATIONS_SET_INDEX: On return, the index of the equations set that has been added.</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">PROBLEM_SOLVER_CREATE_FINISH(PROBLEM, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Finish the creation of the solver for the problem solutions.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>PROBLEM: A pointer to the problem to finish the solvers for</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">PROBLEM_SOLVER_CREATE_START(PROBLEM, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Start the creation of a problem solver for a problem.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>PROBLEM: A pointer to the problem to start the creation of a solution for.</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">PROBLEM_SOLVER_DESTROY(PROBLEM, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Destroy the solvers for a problem.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>PROBLEM: A pointer to the problem to destroy the solver for.</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">PROBLEM_SOLVER_GET(PROBLEM, SOLUTION_INDEX, SOLVER, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Returns a pointer to the solver for a solution on a problme.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>PROBLEM: A pointer to the problem to get the solver for.</li><li>SOLUTION_INDEX: The solution index to get the solver for.</li><li>SOLVER: On return, a pointer to the solver. Must not be associated on entry.</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">PROBLEMS_FINALISE(ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Finalises all problems and deallocates all memory.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">PROBLEMS_INITIALISE(ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Intialises all problems.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><div class="section" lang="en"><div class="titlepage"><div><p class="returntotop"><a href="#N10001">Return to top</a></p><div><h3 class="title"><a id="N11421" />Solver</h3></div></div></div><span><strong class="command">SOLVER_CREATE_FINISH(SOLVER, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Finishes the process of creating a solver for a problem solution.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>SOLVER: A pointer the solver to finish the creation of.</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">SOLVER_CREATE_START(SOLUTION, SOLVE_TYPE, SOLVER, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Starts the process of creating a solver for a problem solution.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>SOLUTION: A pointer to the solution to create the solver for.</li><li>SOLVE_TYPE: The type of solver to create SOLVER_ROUTINES::SolverTypes,SOLVER_ROUTINES</li><li>SOLVER: On exit, a pointer to the problem solver.</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">SOLVER_DESTROY(SOLVER, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Destroy a problem solver.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>SOLVER: A pointer the solver to destroy</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">SOLVER_LIBRARY_SET(SOLVER, SOLVER_LIBRARY, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Sets/changes the type of library to use for the solver.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>SOLVER: A pointer the solver to set the type of</li><li>SOLVER_LIBRARY: The type of library to use for the solver SOLVER_ROUTINES::SolverLibraries,SOLVER_ROUTINES</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">SOLVER_LINEAR_DIRECT_TYPE_SET(SOLVER, DIRECT_SOLVER_TYPE, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Sets/changes the type of direct linear solver.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>SOLVER: A pointer the problem solver to set the direct linear solver type</li><li>DIRECT_SOLVER_TYPE: The type of direct linear solver to set SOLVER_ROUTINES::DirectLinearSolverTypes,SOLVER_ROUTINES</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">SOLVER_LINEAR_ITERATIVE_ABSOLUTE_TOLERANCE_SET(SOLVER, ABSOLUTE_TOLERANCE, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Sets/changes the maximum absolute tolerance for an iterative linear solver.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>SOLVER: A pointer the problem solver to set</li><li>ABSOLUTE_TOLERANCE: The absolute tolerance to set</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">SOLVER_LINEAR_ITERATIVE_DIVERGENCE_TOLERANCE_SET(SOLVER, DIVERGENCE_TOLERANCE, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Sets/changes the maximum divergence tolerance for an iterative linear solver.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>SOLVER: A pointer the problem solver to set</li><li>DIVERGENCE_TOLERANCE: The divergence tolerance to set</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">SOLVER_LINEAR_ITERATIVE_MAXIMUM_ITERATIONS_SET(SOLVER, MAXIMUM_ITERATIONS, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Sets/changes the maximum number of iterations for an iterative linear solver.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>SOLVER: A pointer the problem solver to set the maximum number of iterations</li><li>MAXIMUM_ITERATIONS: The maximum number of iterations</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">SOLVER_LINEAR_ITERATIVE_PRECONDITIONER_TYPE_SET(SOLVER, ITERATIVE_PRECONDITIONER_TYPE, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Sets/changes the type of preconditioner for an iterative linear solver.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>SOLVER: A pointer the problem solver to set the iterative linear solver type</li><li>ITERATIVE_PRECONDITIONER_TYPE: The type of iterative preconditioner to set SOLVER_ROUTINES::IterativeLinearSolverTypes,SOLVER_ROUTINES</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">SOLVER_LINEAR_ITERATIVE_RELATIVE_TOLERANCE_SET(SOLVER, RELATIVE_TOLERANCE, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Sets/changes the relative tolerance for an iterative linear solver.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>SOLVER: A pointer the solver to set</li><li>RELATIVE_TOLERANCE: The relative tolerance to set</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">SOLVER_LINEAR_ITERATIVE_TYPE_SET(SOLVER, ITERATIVE_SOLVER_TYPE, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Sets/changes the type of iterative linear solver.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>SOLVER: A pointer the solver to set the iterative linear solver type</li><li>ITERATIVE_SOLVER_TYPE: The type of iterative linear solver to set SOLVER_ROUTINES::IterativeLinearSolverTypes,SOLVER_ROUTINES</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">SOLVER_LINEAR_TYPE_SET(SOLVER, LINEAR_SOLVER_TYPE, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Sets/changes the type of linear solver.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>SOLVER: A pointer the solver to set the linear solver type</li><li>LINEAR_SOLVER_TYPE: The type of linear solver to set SOLVER_ROUTINES::LinearSolverTypes,SOLVER_ROUTINES</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">SOLVER_OUTPUT_TYPE_SET(SOLVER, OUTPUT_TYPE, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Sets/changes the output type for a solver.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>SOLVER: A pointer the problem solver to set the iterative linear solver type</li><li>OUTPUT_TYPE: The type of solver output to be set SOLVER_ROUTINES::OutputTypes,SOLVER_ROUTINES</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">SOLVER_SPARSITY_TYPE_SET(SOLVER, SPARSITY_TYPE, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Sets/changes the sparsity type for a solver.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>SOLVER: A pointer the problem solver to set the iterative linear solver type</li><li>SPARSITY_TYPE: The type of solver sparsity to be set SOLVER_ROUTINES::SparsityTypes,SOLVER_ROUTINES</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">SOLVER_SOLVE(SOLVER, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Solve the problem.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>SOLVER: A pointer the solver to solve</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div><span><strong class="command">SOLVER_VARIABLES_UPDATE(SOLVER, ERR, ERROR,*)</strong></span><div class="itemizedlist"><ul type="disc"><li>Description: Updates the dependent variables from the solver solution.</li><li>Parameters<div class="itemizedlist"><ul type="circle"><li>SOLVER: A pointer the solver to update the variables from</li><li>ERR: The error code</li><li>ERROR: The error string</li><li>*: </li></ul></div></li></ul></div></div></div></div><div class="chapter" lang="en"><div class="titlepage"><div><div><h2 class="title"><a id="N1154E" />Chapter 7. Coding Style</h2></div></div></div>
  This is an attempt to document the programming "style" for use with openCMISS.
  <div class="itemizedlist"><ul type="disc"><li>Within a module all named constants and procedure names should be prefixed by a name indicating that module so as to maintain a namespace.</li><li>All dynamic arrays should be <code class="code">ALLOCATABLE</code> rather than <code class="code">POINTER</code> unless full pointer functionality is required.</li><li>A double space should be used for an indent. Tabs should not be used to indent code.</li><li>All pointers should be checked to see if they are <code class="code">ASSOCIATED</code> before de-referencing them.</li><li>If there is just a single statement following an <code class="code">IF</code> clause use the inline form of the <code class="code">IF</code> statement and do not use <code class="code">THEN</code> and <code class="code">ENDIF</code>.</li><li>There should be a space before the first continuation character and a space after the second continuation character when continuing lines.</li><li>Use standard loop variable names e.g., <code class="code">nn</code>, <code class="code">component_idx</code>, when looping rather than temporary variable names.</li><li>When using case statements put in all known values of the the case variable and use a <code class="code">CALL FLAG_ERROR("Not implemented", ...</code> statement if the code for the case variable has yet to be coded.</li><li>Use a <code class="code">!================</code>... line between subroutines and functions</li><li>For dummy array arguments the dimension qualifier should be with the array name i.e., use <code class="code">INTEGER(INTG) :: FRED(N)</code> rather than <code class="code">INTEGER(INTG), DIMENSION(N) :: FRED</code>.</li></ul></div></div></div></body></html>